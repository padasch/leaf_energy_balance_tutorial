{
  "hash": "8fa5ee8301d5fe5d515f7f94c8787159",
  "result": {
    "markdown": "# Algorithm\n\n\n\n\n\n## Description\n\nThe goal of this algorithm is to predict a leaf temperature at which the costs for maintaining photosynthesis are minimal. To do this, two optimization algorithms are required as displayed in @fig-optimization-algorithm, the numerical P-Model algorithm and the energy balance algorithm.\n\nThe **numerical P-Model algorithm** solves the optimization problem to find the values for $V_{cmax}$, $J_{max}$, and $g_{s}$ at which the carbon costs for maintaining photosynthesis are minimal (explained in @sec-theory):\n\n$$\n\\frac{\\beta \\;V_{cmax} + 1.6\\;D\\;g_s + c \\;J_{max} }{A_{gross}} = min.\n$$\n\nThe **energy balance algorithm** searches for the leaf temperature that closes the energy budget described in @sec-leb. Certain terms within the energy balance depend on assuming a leaf temperature in the first place. This turns the algorithm into an optimization problem where the goal is to minimze the difference between the initially assumed leaf temperature ($T_{\\text{leaf, init}}$) and the leaf temperature that closes the energy balance ($T_{\\text{leaf, eb}}$):\n\n$$\nT_{\\text{leaf, init}} - T_{\\text{leaf, eb}} = min.\n$$\n\nThe algorithm visualized in @fig-optimization-algorithm reads as follows:\n\n```         \n1. Pick random values for vcmax, jmax, gs\n2. Pick random value for tc_leaf (initial leaf temperature)\n3. Calculate the energy balanced given tc_leaf, gs, abiotic environment\n4. Check if initial tc_leaf equals tc_leaf that closes the energy balance:\n   If false, re-run energy balance with a new tc_leaf\n   If true, then proceed\n5. Use tc_leaf, vcmax, jmax, gs, abiotic environment to calculate the carbon costs\n6. Check if carbon costs are minimal\n   If false, re-start at 1. with new parameters for vcmax, jmax, and gs\n   If true, return tc_leaf, vcmax, jmax, gs\n```\n\n-   Describe all functions used in here\n\n-   Functions needed\n\n    -   Numerical optimization routine for\n\n        -   Leaf Energy Balance\n\n        -   For Vcmax/gs\n\n    -   Cost function\n\n    -   Visualise cost optimization\n\n-   Explain nested optimization\n\n    -   Closing the Energy Balance\n\n    -   Cost Minimization\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Algorithm for calculating optimal traits using the numerical P-Model coupled to a leaf energy balance model. The numerical P-Model parts are in purple. The energy balance model parts are in organge. Note that $J_{max}$ is implemented here for reasons of completeness. The current optimization routine does not properly optimize $J_{max}$.](figures/optimization_scheme.svg){#fig-optimization-algorithm fig-align='center' width=80%}\n:::\n:::\n\n\n## Implementation\n\nThe individual algorithms described above are based on two functions - one function to calculate the quantitiy to be optimized and one function for handling the optimization. Below are demonstrations for calling the algorithms separately and coupled. All functions can be found in the `R` directory of this repository.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Get standard conditions for abiotic and biotic conditions:\ntc_air  <- 25     # degC\ntc_leaf <- 30     # degC\nvpd_air <- 2000   # Pa\npatm    <- 101325 # Pa\nco2     <- 400    # ppm\nppfd    <- 500e-6 # mol/m2/s\nvcmax   <- 50e-6  # mol/m2/s\njmax    <- 100e-6 # mol/m2/s\ngs      <- 1.5e-6 # mol CO2 /m2/s/Pa\nfapar   <- 1      # -\nkphio   <- 0.087  # -\nbeta    <- 146    # -\nc_cost  <- 0.103  # -\nwind          <-  2    # m/s\nleaf_size     <-  0.02 # m\nstomata_ratio <-  1    # -\nleaf_abs      <-  0.5  # -\n```\n:::\n\n\n### Numerical P-Model\n\nBelow is a demonstration of the numerical P-Model algorithm without considering the leaf energy balance. Comparing the results of the numerical P-Model against the analytical P-Model shows that they achieve a similar $\\chi \\approx0.68$ but with quite different values for $V_{cmax}$, $J_{cmax}$, and $g_{s}$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Analytical P-Model\nrpmodel::rpmodel(\n  tc = tc_air, \n  vpd = vpd_air, \n  co2 = co2, \n  fapar = 1, \n  ppfd = ppfd, \n  patm = patm, \n  kphio = kphio\n) |> as_tibble() |> knitr::kable()\n```\n\n::: {.cell-output-display}\n|       gpp|    ca| gammastar|      kmm| ns_star|       chi|       xi|        mj|        mc|       ci|    iwue|    gs|    vcmax|  vcmax25|     jmax|   jmax25|    rd|\n|---------:|-----:|---------:|--------:|-------:|---------:|--------:|---------:|---------:|--------:|-------:|-----:|--------:|--------:|--------:|--------:|-----:|\n| 0.0001183| 40.53|     4.332| 70.84225|       1| 0.6868433| 82.82301| 0.6439624| 0.2382018| 27.83776| 7.93265| 8e-07| 4.13e-05| 4.13e-05| 6.53e-05| 6.53e-05| 6e-07|\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Numerical P-Model\noptimize_traits_and_costs(\n  tc_air = tc_air,\n  vpd_air = vpd_air,\n  patm = patm,\n  co2 = co2,\n  ppfd = ppfd,\n  kphio = kphio\n) |> knitr::kable()\n```\n\n::: {.cell-output-display}\n|   vcmax|      jmax|      gs|       ci|       chi|      a_c|      a_j|  a_gross|     ci_c|     ci_j| cost_transp| cost_vcmax| cost_jmax| carbon_costs|include_energy_balance | tc_air| tc_leaf|\n|-------:|---------:|-------:|--------:|---------:|--------:|--------:|--------:|--------:|--------:|-----------:|----------:|---------:|------------:|:----------------------|------:|-------:|\n| 7.8e-05| 0.0004173| 1.5e-06| 27.79729| 0.6858447| 1.85e-05| 1.86e-05| 1.85e-05| 27.79729| 27.79325|    402.6706|   983.3292|  3.713537|     867.3698|FALSE                  |     25|      25|\n:::\n:::\n\n\n#### Relevant Functions\n\n::: {.callout-note collapse=\"true\"}\n## calculate_traits_and_costs()\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (par, tc_air, vpd_air, ppfd, fapar = 1, co2, patm, kphio, \n    beta = 146, maximize = FALSE, return_all = TRUE, units_out = \"per-s\", \n    include_energy_balance = FALSE, ...) \n{\n    vcmax <- par[1]\n    jmax <- par[2]\n    gs <- par[3]\n    if (include_energy_balance == TRUE) {\n        tc_leaf <- optimize_leaf_energy_balance(tc_air = tc_air, \n            vpd_air = vpd_air, gs = gs/3600/24, ppfd = ppfd/3600/24, \n            patm = patm, ...)\n        vpd_leaf <- air_vpd_to_leaf_vpd(vpd_air, tc_air, tc_leaf)\n    }\n    else {\n        tc_leaf <- tc_air\n        vpd_leaf <- vpd_air\n    }\n    kmm <- rpmodel::kmm(tc_leaf, patm)\n    gammastar <- rpmodel::gammastar(tc_leaf, patm)\n    ns_star <- rpmodel::viscosity_h2o(tc_leaf, patm)/rpmodel::viscosity_h2o(25, \n        101325)\n    ca <- rpmodel::co2_to_ca(co2, patm)\n    kphio <- kphio * rpmodel::ftemp_kphio(tc_leaf, c4 = F)\n    iabs <- ppfd * fapar\n    L <- 1/sqrt(1 + ((4 * kphio * iabs)/jmax)^2)\n    A <- -gs\n    B <- gs * ca - 2 * gammastar * gs - L * kphio * iabs\n    C <- 2 * gammastar * gs * ca + L * kphio * iabs * gammastar\n    ci_j <- QUADM(A, B, C)\n    a_j <- kphio * iabs * (ci_j - gammastar)/(ci_j + 2 * gammastar) * \n        L\n    c_cost <- 0.103\n    A <- -1 * gs\n    B <- gs * ca - gs * kmm - vcmax\n    C <- gs * ca * kmm + vcmax * gammastar\n    ci_c <- QUADM(A, B, C)\n    a_c <- vcmax * (ci_c - gammastar)/(ci_c + kmm)\n    ci <- max(ci_c, ci_j)\n    a_gross <- min(a_j, a_c)\n    carbon_costs <- get_carbon_costs(vpd_leaf = vpd_leaf, ns_star = ns_star, \n        gs = gs, vcmax = vcmax, jmax = jmax, beta = beta, c_cost = c_cost, \n        a_gross = a_gross, cost_type = \"relative_carbon_costs\")\n    if (return_all) {\n        if (units_out == \"per-s\") {\n            vcmax <- vcmax/(3600 * 24)\n            jmax <- jmax/(3600 * 24)\n            gs <- gs/(3600 * 24)\n            a_c <- a_c/(3600 * 24)\n            a_j <- a_j/(3600 * 24)\n            a_gross <- a_gross/(3600 * 24)\n        }\n        return(tibble(vcmax = vcmax, jmax = jmax, gs = gs, ci = ci, \n            chi = ci/ca, a_c = a_c, a_j = a_j, a_gross = a_gross, \n            ci_c = ci_c, ci_j = ci_j, cost_transp = carbon_costs$cost_transp, \n            cost_vcmax = carbon_costs$cost_vcmax, cost_jmax = carbon_costs$cost_jmax, \n            carbon_costs = carbon_costs$carbon_costs, include_energy_balance = include_energy_balance, \n            tc_air = tc_air, tc_leaf = tc_leaf))\n    }\n    else {\n        return(carbon_costs$carbon_costs)\n    }\n}\n<bytecode: 0x125bdb858>\n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## get_carbon_costs()\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (ns_star, gs, vpd_leaf, beta, vcmax, c_cost, jmax, a_gross, \n    cost_type) \n{\n    cost_options <- c(\"relative_carbon_costs\")\n    if (!(cost_type %in% cost_options)) {\n        stop(\"get_carbon_costs: Requested cost type not implemented.\")\n    }\n    cost_transp <- 1.6 * ns_star * gs * vpd_leaf\n    cost_vcmax <- beta * vcmax\n    cost_jmax <- c_cost * jmax\n    if (cost_type == \"relative_carbon_costs\") {\n        carbon_costs <- (cost_transp + cost_vcmax + cost_jmax)/a_gross\n    }\n    out <- list(cost_transp = cost_transp, cost_vcmax = cost_vcmax, \n        cost_jmax = cost_jmax, carbon_costs = carbon_costs)\n}\n<bytecode: 0x124cac910>\n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## optimize_traits_and_costs()\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (tc_air, vpd_air, patm, co2, ppfd, kphio, include_energy_balance = FALSE, \n    vcmax_start = NA, jmax_start = NA, gs_start = NA, ...) \n{\n    ppfd <- ppfd * 3600 * 24\n    vcmax_start <- 20\n    jmax_start <- 20\n    gs_start <- 0.3\n    out_optim <- optimr::optimr(par = c(vcmax_start, jmax_start, \n        gs_start), upper = c(vcmax_start * 1000, jmax_start * \n        1000, gs_start * 100), lower = c(vcmax_start/1000, jmax_start/1000, \n        gs_start/100), fn = calculate_traits_and_costs, method = \"L-BFGS-B\", \n        control = list(maxit = 1000), tc_air = tc_air, vpd_air = vpd_air, \n        patm = patm, co2 = co2, ppfd = ppfd, kphio = kphio, include_energy_balance = include_energy_balance, \n        maximize = TRUE, return_all = FALSE, ...)\n    optimized_par <- calculate_traits_and_costs(par = out_optim$par, \n        tc_air = tc_air, vpd_air = vpd_air, patm = patm, co2 = co2, \n        ppfd = ppfd, kphio = kphio, include_energy_balance = include_energy_balance, \n        units_out = \"per-s\", return_all = TRUE, ...)\n    return(optimized_par)\n}\n<bytecode: 0x14396a148>\n```\n:::\n:::\n\n:::\n\n### Energy Balance\n\nBelow is a demonstration of the energy balance functions and a sensitivity analysis.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndiff_tcleaf <- \n  calculate_leaf_energy_balance(  \n    tc_leaf       = tc_leaf, \n    tc_air        = tc_air,\n    gs            = gs,\n    ppfd          = ppfd, \n    vpd_air       = vpd_air, \n    patm          = patm,\n    return_what   = c(\"balance\")\n  )\n\nleb_fluxes <- \n  calculate_leaf_energy_balance(  \n    tc_leaf       = tc_leaf, \n    tc_air        = tc_air,\n    gs            = gs,\n    ppfd          = ppfd, \n    vpd_air       = vpd_air, \n    patm          = patm,\n    return_what   = c(\"fluxes\")\n  )\n\ncat(\"\\nThe squared difference between input tc_leaf and\",\n    \"\\nenergy-balance-closure tc_leaf is: \", diff_tcleaf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThe squared difference between input tc_leaf and \nenergy-balance-closure tc_leaf is:  6.507787\n```\n:::\n\n```{.r .cell-code}\ncat(\"\\nThe energy balance variables at this state are: \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThe energy balance variables at this state are: \n```\n:::\n\n```{.r .cell-code}\nknitr::kable(leb_fluxes)\n```\n\n::: {.cell-output-display}\n|  ELEAFeb| Gradiation|     Rsol|  Rnetiso| Rlongup|        H| lambdaET|        gw|      Gbh|        H2| tc_leaf2|\n|--------:|----------:|--------:|--------:|-------:|--------:|--------:|---------:|--------:|---------:|--------:|\n| 3.312554|  0.1949628| 218.8184| 11.49047| 454.922| 416.2046| 145.5992| 0.2252718| 2.845609| -125.5096| 23.49221|\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntc_leaf_eb <- \n  optimize_leaf_energy_balance(\n   tc_air  = tc_air,\n   vpd_air = vpd_air,\n   gs      = gs,\n   ppfd    = ppfd,\n   patm    = patm,\n )\n\ncat(\"Given the environment and gs, tc_leaf is: \", tc_leaf_eb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGiven the environment and gs, tc_leaf is:  23.45996\n```\n:::\n:::\n\n\n\n#### Relevant Functions \n\n::: {.callout-note collapse=\"true\"}\n## calculate_leaf_energy_balance()\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (tc_leaf = 21.5, tc_air = 20, gs = 1.5e-06, ppfd = 0.0015, \n    vpd_air = 2000, patm = 101325, wind = 2, leaf_size = 0.02, \n    stomata_ratio = 1, leaf_abs = 0.5, return_what = c(\"balance\", \n        \"fluxes\")) \n{\n    return_what <- match.arg(return_what)\n    gs <- 1.6 * gs * patm\n    ppfd <- ppfd * 10^6\n    Boltz <- 5.67 * 10^-8\n    Emissivity <- 0.95\n    LatEvap <- 2.54\n    CPAIR <- 1010\n    H2OLV0 <- 2501000\n    H2OMW <- 0.018\n    AIRMA <- 0.029\n    AIRDENS <- 1.204\n    UMOLPERJ <- 4.57\n    DHEAT <- 2.15e-05\n    AIRDENS <- patm/(287.058 * celsius_to_kelvin(tc_air))\n    LHV <- (H2OLV0 - 2365 * tc_air) * H2OMW\n    SLOPE <- (esat(tc_air + 0.1) - esat(tc_air))/0.1\n    Gradiation <- 4 * Boltz * celsius_to_kelvin(tc_air)^3 * Emissivity/(CPAIR * \n        AIRMA)\n    CMOLAR <- patm/(8.314 * celsius_to_kelvin(tc_air))\n    Gbhforced <- 0.003 * sqrt(wind/leaf_size) * CMOLAR\n    GRASHOF <- 1.6e+08 * abs(tc_leaf - tc_air) * (leaf_size^3)\n    Gbhfree <- 0.5 * DHEAT * (GRASHOF^0.25)/leaf_size * CMOLAR\n    Gbh <- 2 * (Gbhfree + Gbhforced)\n    Gbhr <- Gbh + 2 * Gradiation\n    Gbw <- stomata_ratio * 1.075 * Gbh\n    gw <- gs * Gbw/(gs + Gbw)\n    Rlongup <- Emissivity * Boltz * celsius_to_kelvin(tc_leaf)^4\n    Rsol <- 2 * ppfd/UMOLPERJ\n    Rnet <- leaf_abs * Rsol - Rlongup\n    ea <- esat(tc_air, patm) - vpd_air\n    ema <- 0.642 * (ea/celsius_to_kelvin(tc_air))^(1/7)\n    if (is.na(ema)) {\n        stop(\"calculate_leaf_energy_balance: `ema` is NA, likely due to unrealistic combination of given vpd and air temperature (too high vpd for that air temperature).\")\n    }\n    Rnetiso <- leaf_abs * Rsol - (1 - ema) * Boltz * celsius_to_kelvin(tc_air)^4\n    GAMMA <- CPAIR * AIRMA * patm/LHV\n    ET <- (1/LHV) * (SLOPE * Rnetiso + vpd_air * Gbh * CPAIR * \n        AIRMA)/(SLOPE + GAMMA * Gbhr/gw)\n    lambdaET <- LHV * ET\n    Y <- 1/(1 + Gradiation/Gbh)\n    H2 <- Y * (Rnetiso - lambdaET)\n    H <- -CPAIR * AIRDENS * (Gbh/CMOLAR) * (tc_air - tc_leaf)\n    tc_leaf2 <- tc_air + H2/(CPAIR * AIRDENS * (Gbh/CMOLAR))\n    EnergyBal <- (tc_leaf - tc_leaf2)\n    if (return_what == \"balance\") {\n        return(EnergyBal)\n    }\n    if (return_what == \"fluxes\") {\n        l <- data.frame(ELEAFeb = 1000 * ET, Gradiation = Gradiation, \n            Rsol = Rsol, Rnetiso = Rnetiso, Rlongup = Rlongup, \n            H = H, lambdaET = lambdaET, gw = gw, Gbh = Gbh, H2 = H2, \n            tc_leaf2 = tc_leaf2)\n        return(l)\n    }\n}\n<bytecode: 0x125748470>\n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## optimize_leaf_energy_balance()\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (tc_air, vpd_air, gs, ppfd, patm, ...) \n{\n    sol_optimize <- uniroot(f = calculate_leaf_energy_balance, \n        interval = c(max(tc_air - 15, 1), tc_air + 15), tc_air = tc_air, \n        vpd_air = vpd_air, gs = gs, ppfd = ppfd, patm = patm, \n        return_what = \"balance\", ...)\n    tc_leaf <- sol_optimize$root\n    return(tc_leaf)\n}\n```\n:::\n:::\n\n:::\n\n#### Sensitivity Analysis\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrun_fun <- function(df, var) {\n  \n  for (i in 1:nrow(df)) {\n    df$tc_leaf[i] <- \n      optimize_leaf_energy_balance(\n        tc_air  = df$tc_air[i],\n        vpd_air = df$vpd_air[i],\n        gs      = df$gs[i],\n        ppfd    = df$ppfd[i],\n        patm    = df$patm[i],\n        wind    = df$wind[i],\n        leaf_size = df$leaf_size[i],\n        stomata_ratio = df$stomata_ratio[i],\n        leaf_abs = df$leaf_abs[i]\n        )\n    \n      df$tc_diff[i] = df$tc_leaf[i] - df$tc_air[i]\n  }\n  \n  df_out <- df |> select(c(!!var, \"tc_leaf\", \"tc_diff\")) |> pivot_longer(cols = !!var)\n  \n  return(df_out)\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Create empty df for plotting\ndf_abio <- tibble()\ndf_bio  <- tibble()\n\n# Create base df for sensitivity analysis\nn_steps <- 20\ndf_base <- tibble(.rows = n_steps)\ndf_base$tc_air    <- rep(tc_air , n_steps)\ndf_base$vpd_air   <- rep(vpd_air, n_steps)\ndf_base$gs        <- rep(gs     , n_steps)\ndf_base$co2       <- rep(co2     , n_steps)\ndf_base$ppfd      <- rep(ppfd   , n_steps)\ndf_base$patm      <- rep(patm   , n_steps)\ndf_base$wind      <- rep(wind, n_steps)\ndf_base$leaf_size <- rep(leaf_size, n_steps)\ndf_base$leaf_abs  <- rep(leaf_abs, n_steps)\ndf_base$tc_leaf   <- rep(NA, n_steps)\ndf_base$tc_diff   <- rep(NA, n_steps)\ndf_base$stomata_ratio   <- rep(1, stomata_ratio)\ndf_base$kphio     <- rep(kphio, stomata_ratio)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n### ABIOTIC VARIABLES\n## Air temperature and VPD\ndf_tmp <- df_base\ndf_tmp$tc_air  <- seq(1, 50, length.out = n_steps)\n\n# Account for changes in vpd when temperature changes:\ndf_tmp$vpd_air <- \n  air_vpd_to_leaf_vpd(\n    vpd_air = vpd_air,\n    tc_air = tc_air,\n    tc_leaf = df_tmp$tc_air)\n\ndf_tmp <- run_fun(df_tmp, \"tc_air\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n# PPFD\ndf_tmp <- df_base\ndf_tmp$ppfd  <- seq(ppfd/10, ppfd*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"ppfd\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n# Atmospheric pressure\ndf_tmp <- df_base\ndf_tmp$patm  <- seq(patm/10, patm*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"patm\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n# Wind\ndf_tmp <- df_base\ndf_tmp$wind  <- seq(wind/10, wind*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"wind\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n### BIOTIC VARIABLES\n# Stomatal Conductance\ndf_tmp <- df_base\ndf_tmp$gs  <- seq(gs/10, gs*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"gs\")\ndf_bio <- rbind(df_bio, df_tmp)\n\n# Leaf Size\ndf_tmp <- df_base\ndf_tmp$leaf_size  <- seq(leaf_size/10, leaf_size*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"leaf_size\")\ndf_bio <- rbind(df_bio, df_tmp)\n\n# Leaf absorptance\ndf_tmp <- df_base\ndf_tmp$leaf_abs  <- seq(leaf_abs/10, leaf_abs*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"leaf_abs\")\ndf_bio <- rbind(df_bio, df_tmp)\n\n# Stomatal Ratio\ndf_tmp <- df_base |> slice(1:2)\ndf_tmp$stomata_ratio  <- c(1, 2)\n\ndf_tmp <- run_fun(df_tmp, \"stomata_ratio\")\ndf_bio <- rbind(df_bio, df_tmp)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_abio$name <- as.factor(df_abio$name)\ndf_bio$name <- as.factor(df_bio$name)\n\ndf_abio |> \n  ggplot() +\n  aes(x = value,\n      y = tc_leaf) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(0, 50) + \n  labs(title = \"Sensitivity of tc_leaf to abiotic drivers.\",\n       y = \"T_leaf\",\n       x = \"\") +\n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](03-implementation_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=80%}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_bio |> \n  ggplot() +\n  aes(x = value,\n      y = tc_leaf) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(0, 50) + \n  labs(title = \"Sensitivity of tc_leaf to biotic drivers.\",\n       y = \"T_leaf\",\n       x = \"\") +\n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](03-implementation_files/figure-html/unnamed-chunk-15-2.png){fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_abio |> \n  ggplot() +\n  aes(x = value,\n      y = tc_diff) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(-7.5, 7.5) +\n  labs(title = \"Sensitivity of delta T to abiotic drivers\",\n       subtitle = \"Below dotted line means the leaf is cooler\",\n       y = \"T_leaf - T_air\",\n       x = \"\") +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](03-implementation_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=80%}\n:::\n\n```{.r .cell-code}\ndf_bio |> \n  ggplot() +\n  aes(x = value,\n      y = tc_diff) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(-7.5, 7.5) +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  labs(title = \"Sensitivity of delta T to biotic drivers\",\n       subtitle = \"Below dotted line means the leaf is cooler\",\n       y = \"T_leaf - T_air\",\n       x = \"\") +\n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](03-implementation_files/figure-html/unnamed-chunk-16-2.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Coupled Model\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptimize_traits_and_costs(\n  tc_air  = tc_air,\n  vpd_air = vpd_air,\n  patm    = patm,\n  co2     = co2,\n  ppfd    = ppfd,\n  kphio   = kphio,\n  include_energy_balance = TRUE\n) |> knitr::kable()\n```\n\n::: {.cell-output-display}\n|    vcmax|    jmax|        gs|       ci|       chi|      a_c|      a_j|  a_gross|     ci_c|     ci_j| cost_transp| cost_vcmax| cost_jmax| carbon_costs|include_energy_balance | tc_air|  tc_leaf|\n|--------:|-------:|---------:|--------:|---------:|--------:|--------:|--------:|--------:|--------:|-----------:|----------:|---------:|------------:|:----------------------|------:|--------:|\n| 4.54e-05| 0.00036| 0.0002014| 40.42388| 0.9973817| 2.14e-05| 2.14e-05| 2.14e-05| 40.42388| 40.42386|    29.50253|   572.0753|  3.203276|     327.5584|TRUE                   |     25| 18.04351|\n:::\n:::\n\n\n#### Sensitivity Analysis\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Air temperature and VPD\ndf_tmp <- df_base\ndf_tmp$tc_air  <- seq(1, 50, length.out = n_steps)\n\n# Account for changes in vpd when temperature changes:\ndf_tmp$vpd_air <- \n  air_vpd_to_leaf_vpd(\n    vpd_air = vpd_air,\n    tc_air = tc_air,\n    tc_leaf = df_tmp$tc_air)\n\n# With and Without EB\ndf_with_eb <- df_tmp\ndf_wout_eb <- df_tmp\n\n# Run loop\nfor (i in 1:nrow(df_tmp)) {\n  \n  # cat(\"\\n Working on\", i, \"/\", nrow(df_tmp))\n  \n  df_with_eb$data[i] <- \n    optimize_traits_and_costs(\n      tc_air  = df_with_eb$tc_air[i],\n      vpd_air = df_with_eb$vpd_air[i],\n      ppfd    = df_with_eb$ppfd[i],\n      patm    = df_with_eb$patm[i],\n      co2     = df_with_eb$co2[i],\n      kphio   = df_with_eb$kphio[i],\n      include_energy_balance = FALSE\n      ) |> list()\n  \n  df_wout_eb$data[i] <- \n    optimize_traits_and_costs(\n      tc_air  = df_wout_eb$tc_air[i],\n      vpd_air = df_wout_eb$vpd_air[i],\n      ppfd    = df_wout_eb$ppfd[i],\n      patm    = df_wout_eb$patm[i],\n      co2     = df_wout_eb$co2[i],\n      kphio   = df_wout_eb$kphio[i],\n      include_energy_balance = TRUE\n      ) |> list()\n}\n\n# Finish up dataframes\n\nvars_tc <- c(\"tc_air\", \"tc_leaf\", \"tc_diff\")\nvars_pm <- c(\"vcmax\", \"jmax\", \"gs\", \"chi\")\n\ndf_with_eb <- \n  df_with_eb |> \n  select(data) |> \n  unnest(data) |>\n  select(any_of(c(vars_tc, vars_pm))) |> \n  mutate(tc_diff = tc_leaf - tc_air) |> \n  pivot_longer(cols = !any_of(vars_tc)) |> \n  mutate(name = as.factor(name))\n\ndf_wout_eb <- \n  df_wout_eb |> \n  select(data) |> \n  unnest(data) |>\n  select(any_of(c(vars_tc, vars_pm))) |> \n  mutate(tc_diff = tc_leaf - tc_air) |> \n  pivot_longer(cols = !any_of(vars_tc)) |> \n  mutate(name = as.factor(name))\n\ndf_fin <- \n  rbind(\n    df_wout_eb |> mutate(energy_balance = FALSE),\n    df_with_eb |> mutate(energy_balance = TRUE)\n    )\n\ndf_fin |> \n  ggplot() +\n  aes(y = value,\n      x = tc_air,\n      color = energy_balance) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_y\") +\n  labs(title = \"Sensitivity of traits to tc_air\",\n       x = \"T_air\",\n       y = \"Trait Value\") +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  theme_linedraw() \n```\n\n::: {.cell-output-display}\n![](03-implementation_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=80%}\n:::\n\n```{.r .cell-code}\ndf_fin |> \n  select(tc_air, tc_leaf, energy_balance) |> \n  distinct() |> \n  ggplot() +\n  aes(y = tc_leaf,\n      x = tc_air,\n      color = energy_balance) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Sensitivity of traits to tc_air\",\n       x = \"T_air\",\n       y = \"T_leaf\") +\n  geom_abline(intercept = 0, slope = 1, lty = \"dotted\") +\n  theme_linedraw() \n```\n\n::: {.cell-output-display}\n![](03-implementation_files/figure-html/unnamed-chunk-18-2.png){fig-align='center' width=80%}\n:::\n:::\n",
    "supporting": [
      "03-implementation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}