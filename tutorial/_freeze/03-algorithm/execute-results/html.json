{
  "hash": "8f0f6024d24d74a940f571d49d1985b5",
  "result": {
    "markdown": "# Algorithm {#sec-algorithm}\n\n\n\n\n\n## Description\n\nThe goal of this algorithm is to predict a leaf temperature at which the costs for maintaining photosynthesis are minimal. To do this, two optimization algorithms are required as displayed in @fig-optimization-algorithm, the numerical P-Model algorithm and the energy balance algorithm.\n\nThe **numerical P-Model algorithm** solves the optimization problem to find the values for $V_{cmax}$, $J_{max}$, and $g_{s}$ at which the carbon costs for maintaining photosynthesis are minimal (explained in @sec-theory):\n\n$$\n\\frac{\\beta \\;V_{cmax} + 1.6\\;D\\;g_s + c \\;J_{max} }{A_{gross}} = min.\n$$ {#eq-rcc2}\n\nThe **energy balance algorithm** searches for the leaf temperature that closes the energy budget described in @sec-leb. Certain terms within the energy balance depend on assuming a leaf temperature in the first place. This turns the algorithm into an optimization problem where the goal is to minimize the difference between the initially assumed leaf temperature ($T_{\\text{leaf, init}}$) and the leaf temperature that closes the energy balance ($T_{\\text{leaf, eb}}$):\n\n$$\nT_{\\text{leaf, init}} - T_{\\text{leaf, eb}} = min.\n$$ {#eq-leb-criteria}\n\nThe algorithm visualized in @fig-optimization-algorithm reads as follows:\n\n```         \n1. Pick random values for vcmax, jmax, gs\n2. Pick random value for tc_leaf (initial leaf temperature)\n3. Calculate the energy balanced given tc_leaf, gs, abiotic environment\n4. Check if initial tc_leaf equals tc_leaf that closes the energy balance:\n   If false, re-run energy balance with a new tc_leaf\n   If true, then proceed\n5. Use tc_leaf, vcmax, jmax, gs, abiotic environment to calculate the carbon costs\n6. Check if carbon costs are minimal\n   If false, re-start at 1. with new parameters for vcmax, jmax, and gs\n   If true, return tc_leaf, vcmax, jmax, gs\n```\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Algorithm for calculating optimal traits using the numerical P-Model coupled to a leaf energy balance model. The numerical P-Model parts are in purple. The energy balance model parts are in orange. Note that $J_{max}$ is implemented here for reasons of completeness. The current optimization routine does not properly optimize $J_{max}$.](figures/optimization_scheme.svg){#fig-optimization-algorithm fig-align='center' width=80%}\n:::\n:::\n\n\n## Implementation\n\nThe individual algorithms described above are based on two functions - one function to calculate the quantity to be optimized and one function for handling the optimization. Below are demonstrations for calling the algorithms separately and coupled. All functions can be found in the `R` directory of this repository.\n\nFirst, let's set the variables for standard conditions that are used for example runs and the sensitivity analyses below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Get reference values for standard conditions\n## Climate\ntc_air  <- 25     # degC\ntc_leaf <- 30     # degC\nvpd_air <- 1500   # Pa\npatm    <- 101325 # Pa\nco2     <- 400    # ppm\nppfd    <- 500e-6 # mol/m2/s\nfapar   <- 1      # -\n\n## Traits\nvcmax   <- 50e-6  # mol/m2/s\njmax    <- 100e-6 # mol/m2/s\ngs      <- 1.5e-6 # mol CO2 /m2/s/Pa\nkphio   <- 0.087  # -\nbeta    <- 146    # -\nc_cost  <- 0.103  # -\nwind          <-  2    # m/s\nleaf_size     <-  0.02 # m\nstomata_ratio <-  1    # -\nleaf_abs      <-  0.5  # -\n```\n:::\n\n\n### Numerical P-Model\n\nThe relevant functions are:\n\n::: {.callout-note collapse=\"true\"}\n## calculate_traits_and_costs()\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n#' Function to be optimized based on carbon costs for photosynthesis\n#'\n#' @details To achieve good numerical performance, the input values must be in per-day and not in per-second.\n#'\n#' @param par Input parameters in order: vcmax, jmax, gs [µmol/m^2/d]\n#' @param tc_leaf Leaf temperature [ºC]\n#' @param vpd_leaf Leaf vapor pressure deficit [Pa]\n#' @param ppfd Photosynthetically Active Photon Flux Density [µmol/m^2/s]\n#' @param fapar Fraction absorbed photosynthetically active radiation, set to 1 [-]\n#' @param co2 Atmospheric partial pressure of CO2 [Pa]\n#' @param patm Atmospheric pressure [Pa]\n#' @param kphio Calibrated quantum yield efficiency [-]\n#' @param beta Unit cost ratio for acquiring nitrogen over water [-]\n#' @param maximize Whether carbon cost metric should be maximized or not [TRUE/FALSE]\n#' @param return_all What to return. FALSE = carbon costs only. TRUE = all calculated variables\n#' @param units_out_per_second Whether output units should be in per-day or per-second [TRUE/FALSE]\n#' @param include_energy_balance Whether energy balance model should be coupled [TRUE/FALSE]\n#' @param ... Additional arguments to be piped \n#'\ncalculate_traits_and_costs <- function(\n    par,\n    tc_air,\n    vpd_air,\n    ppfd,\n    fapar = 1,\n    co2,\n    patm,\n    kphio,\n    beta       = 146.0,\n    maximize   = FALSE,\n    return_all = TRUE,\n    units_out_per_second  = TRUE,\n    include_energy_balance = FALSE,\n    ...) {\n  \n  \n  ## 1: Parameters to be optimized:\n  vcmax <- par[1]\n  jmax  <- par[2]\n  gs    <- par[3]\n  \n  ## x: Given gs, calculate the leaf temperature\n  if (include_energy_balance == TRUE) {\n    tc_leaf <- \n      optimize_leaf_energy_balance(\n        tc_air  = tc_air,\n        vpd_air = vpd_air,\n        gs      = gs   / 3600 / 24, # Adjust input to per-second\n        ppfd    = ppfd / 3600 / 24, # Adjust input to per-second\n        patm    = patm,\n        ...\n      )\n    \n    vpd_leaf <- air_vpd_to_leaf_vpd(vpd_air, tc_air, tc_leaf)\n    \n  } else {\n    tc_leaf  <- tc_air\n    vpd_leaf <- vpd_air\n  }\n  \n  ## 2: Get photosynthetic variables based on environmental conditions:\n  kmm       <- rpmodel::kmm(tc_leaf, patm)\n  gammastar <- rpmodel::gammastar(tc_leaf, patm)\n  ns_star   <- rpmodel::viscosity_h2o(tc_leaf, patm) / rpmodel::viscosity_h2o(25, 101325)\n  ca        <- rpmodel::co2_to_ca(co2, patm)\n  kphio     <- kphio * rpmodel::ftemp_kphio( tc_leaf, c4 = F)\n  iabs      <- ppfd * fapar\n  \n  ## 3: Calculate assimilation rates with to-be-optimized jmax, vcmax and gs:\n  \n  ## 3.1: Electron transport is limiting\n  ## Solve quadratic equation system using: A(Fick's Law) = A(Jmax Limitation)\n  ## This leads to a quadratic equation:\n  ## A * ci^2 + B * ci + C  = 0\n  ## 0 = a + b*x + c*x^2\n  \n  ## Jmax Limitation following Smith (1937):\n  ## A = gs * (ca - ci)\n  ## A = kphio * iabs (ci-gammastar)/ci+2*gammastar) * L\n  ## L = 1 / sqrt(1 + ((4 * kphio * iabs)/jmax)^2)\n  \n  ## with\n  L <- 1.0 / sqrt(1.0 + ((4.0 * kphio * iabs)/jmax)^2)\n  A <- -gs\n  B <- gs * ca - 2 * gammastar * gs - L * kphio * iabs\n  C <- 2 * gammastar * gs * ca + L * kphio * iabs * gammastar\n  \n  ci_j <- QUADM(A, B, C)\n  a_j  <- kphio * iabs * (ci_j - gammastar)/(ci_j + 2 * gammastar) * L  \n  \n  c_cost <- 0.103 # As estimated by Wang et al. (2017)\n  \n  # ............................................................................\n  # ## Jmax Limitation following Farquhar (1989):\n  #   ## A = gs * (ca - ci)\n  #   ## A = j/4 * (ci-gammastar)/ci+2*gammastar)\n  #   ## j = (kphio * iabs + jmax - sqrt(( kphio * iabs + jmax)^2 - (4 * kphio * theta * iabs * jmax))) / (2*theta)\n  #   \n  #   ## with\n  #   theta <- 0.85\n  #   j <- (kphio * iabs + jmax - sqrt(( kphio * iabs + jmax)^2 - (4 * kphio * theta * iabs * jmax))) / (2 * theta)\n  #   A <- -gs\n  #   B <- gs * ca - 2 * gammastar * gs - j/4\n  #   C <- 2 * gammastar * gs * ca + gammastar * j/4\n  #   \n  #   ci_j <- ci_j <- QUADM(A, B, C)\n  #   a_j <- j/4 * (ci_j - gammastar)/(ci_j + 2 * gammastar)\n  #   \n  #   c_cost <- 0.053 # As estimated by Smith et al. (2019)\n  # ............................................................................\n  \n  ## 4: Rubisco is limiting\n  ## Solve Eq. system\n  ## A = gs (ca- ci)\n  ## A = Vcmax * (ci - gammastar)/(ci + Kmm)\n  \n  ## This leads to a quadratic equation:\n  ## A * ci^2 + B * ci + C  = 0\n  ## 0 = a + b*x + c*x^2\n  \n  ## with\n  A <- -1.0 * gs\n  B <- gs * ca - gs * kmm - vcmax\n  C <- gs * ca * kmm + vcmax * gammastar\n  \n  ci_c <- QUADM(A, B, C)\n  a_c  <- vcmax * (ci_c - gammastar) / (ci_c + kmm)\n  \n  ## 5. Take minimum of the two assimilation rates and maximum of the two ci\n  ci      <- max(ci_c, ci_j)\n  a_gross <- min( a_j, a_c ) # Original approach using min()\n  \n  # Alternative approach using hyperbolic minumum to avoid discontinuity (see Duursma et al (2015), Eq. (5))\n  # a_gross <- -QUADP(A = 1 - 1E-07, B = a_c + a_j, C = a_c*a_j)\n  \n  ## 6. Get carbon costs\n  carbon_costs <- \n    get_carbon_costs(\n      vpd_leaf  = vpd_leaf,\n      ns_star   = ns_star,\n      gs        = gs,\n      vcmax     = vcmax,\n      jmax      = jmax,\n      beta      = beta,\n      c_cost    = c_cost,\n      a_gross   = a_gross,\n      cost_type = \"relative_carbon_costs\"\n    )\n  \n  ## 7. Get additional variables\n  chi  <- ci / ca\n  iwue <- ca * (1 - chi) / 1.6\n  \n  # if (maximize) net_assim <- -carbon_costs\n  \n  if (return_all) {\n    \n    ## Turn per-day units back into per-second\n    if (units_out_per_second == TRUE) {\n      vcmax   <- vcmax   / (3600 * 24) # Final unit: [mol/m2/s]\n      jmax    <- jmax    / (3600 * 24) # Final unit: [mol/m2/s]\n      gs      <- gs      / (3600 * 24) # Final unit: [mol/m2/s/Pa]\n      a_c     <- a_c     / (3600 * 24) # Final unit: [mol/m2/s]\n      a_j     <- a_j     / (3600 * 24) # Final unit: [mol/m2/s]\n      a_gross <- a_gross / (3600 * 24) # Final unit: [mol/m2/s]\n      # carbon_costs <- carbon_costs / (3600 * 24) # Final unit: [-]\n    }\n    \n    ## Output\n    return(\n      tibble(\n        vcmax = vcmax,\n        jmax = jmax,\n        gs = gs,\n        ci = ci,\n        chi = chi,\n        a_c = a_c,\n        a_j = a_j,\n        a_gross = a_gross,\n        ci_c = ci_c,\n        ci_j = ci_j,\n        iwue = iwue,\n        kmm = kmm,\n        gammastar = gammastar,\n        ns_star = ns_star,\n        cost_transp = carbon_costs$cost_transp,\n        cost_vcmax = carbon_costs$cost_vcmax,\n        cost_jmax = carbon_costs$cost_jmax,\n        carbon_costs = carbon_costs$carbon_costs,\n        include_energy_balance = include_energy_balance,\n        tc_air  = tc_air,\n        tc_leaf = tc_leaf\n      )\n    )\n  } else {\n    return( carbon_costs$carbon_costs )\n  }\n}\n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## get_carbon_costs()\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n#' Function to calculate the carbon costs for photosynthesis\n#'\n#' @param ns_star Relative viscosity of water [-]\n#' @param gs Stomatal conductance of CO2 [µmol/m2/s]\n#' @param vpd_leaf Vapor pressure deficit at the leaf-level [Pa]\n#' @param beta Unit cost ratio of acquiring nitrogen over water [-]\n#' @param c_cost Marginal cost of maintaining Jmax [-]\n#' @param vcmax Maximum rate of carboxylation [µmol/m2/s]\n#' @param jmax Maximum rate of electron transport [µmol/m2/s]\n#' @param a_gross Gross assimilation rate [µmol/m2/s]\n#' @param cost_type Cost type that should be calculated\n#'\n#' @return List with cost for each each process and entire photosynthesis\nget_carbon_costs <- function(\n    ns_star,\n    gs,\n    vpd_leaf,\n    beta,\n    vcmax,\n    c_cost,\n    jmax,\n    a_gross,\n    cost_type) {\n  \n  # Check input\n  cost_options <- c(\"relative_carbon_costs\")\n  \n  if (!(cost_type %in% cost_options)) {\n    stop(\"get_carbon_costs: Requested cost type not implemented.\")\n    }\n  \n  cost_transp <- 1.6 * ns_star * gs * vpd_leaf\n  cost_vcmax  <- beta * vcmax\n  cost_jmax   <- c_cost * jmax\n  \n  if (cost_type == \"relative_carbon_costs\") {\n    # With Jmax\n    carbon_costs <- (cost_transp + cost_vcmax + cost_jmax) / a_gross\n    \n    # Without Jmax\n    # carbon_costs <- (cost_transp + cost_vcmax) / a_gross\n  }\n  \n  out <- list(\n    cost_transp  = cost_transp,\n    cost_vcmax   = cost_vcmax,\n    cost_jmax    = cost_jmax,\n    carbon_costs = carbon_costs\n  )\n}\n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## optimize_traits_and_costs()\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n#' Function to calculate the optimal traits and respective carbon costs\n#'\n#' @param tc_air Leaf temperature [ºC]\n#' @param vpd_air Leaf-level vapor-pressure deficit\n#' @param patm Atmospheric pressure [Pa]\n#' @param co2 Atmospheric CO2 concentration [ppm]\n#' @param ppfd Photosynthetically Active Photon Flux Density [µmol/m2/s]\n#' @param kphio Parameter for QYE [-]\n#' @param vcmax_start Starting values for vcmax in the optimization routine\n#' @param jmax_start Starting values for jmax in the optimization routine\n#' @param gs_start Starting values for gs in the optimization routine\n#' @param ... Additional arguments to be piped \n#'\noptimize_traits_and_costs <- function(\n  tc_air,\n  vpd_air,\n  patm,\n  co2,\n  ppfd,\n  kphio,\n  include_energy_balance = FALSE,\n  vcmax_start = NA,\n  jmax_start  = NA,\n  gs_start    = NA,\n  ...\n) {\n  \n  ## Input for optimization has to be in per-day to work properly:\n  ppfd        <- ppfd * 3600 * 24  # / 3600 / 24\n  vcmax_start <- 5                # / 3600 / 24\n  jmax_start  <- 10                # / 3600 / 24 \n  gs_start    <- 0.05               # / 3600 / 24 \n  \n  ## Run optimization\n  ## (TODO: Output order of magnitude depends on lower/upper boundaries)\n  out_optim <- optimr::optimr(\n    \n    ## Optimization inputs:\n    par        = c( vcmax_start,      jmax_start     , gs_start),\n    upper      = c( vcmax_start*100, jmax_start*100, gs_start*10 ),\n    lower      = c( vcmax_start/100, jmax_start/100, gs_start/10 ),\n    fn         = calculate_traits_and_costs,\n    method     = \"L-BFGS-B\",\n    control    = list(maxit = 1000),\n    \n    ## Function inputs:\n    tc_air     = tc_air,\n    vpd_air    = vpd_air,\n    patm       = patm,\n    co2        = co2,\n    ppfd       = ppfd,\n    kphio      = kphio,\n    include_energy_balance = include_energy_balance,\n    maximize   = TRUE,\n    return_all = FALSE,\n    ...)\n  \n  ## Get the carbon costs for the optimized traits\n  optimized_par <- calculate_traits_and_costs(\n    par        = out_optim$par,\n    tc_air     = tc_air,\n    vpd_air    = vpd_air,\n    patm       = patm,\n    co2        = co2,\n    ppfd       = ppfd,\n    kphio      = kphio,\n    include_energy_balance = include_energy_balance,\n    units_out_per_second  = TRUE,\n    return_all = TRUE,\n    ...)\n  \n  ## Return optimized traits and carbon costs\n  return(optimized_par)\n}\n```\n:::\n:::\n\n:::\n\n#### Comparison Against Analytical Solution\n\nBelow is a demonstration of the numerical P-Model algorithm without considering the leaf energy balance. Comparing the results of the numerical P-Model against the analytic P-Model shows that they achieve a similar $\\chi \\approx0.715$ but with quite different values for $V_{cmax}$, $J_{cmax}$, and $g_{s}$. This issue is explained further below.\n\n\n::: {#tbl-output-ana .cell .column-page layout-align=\"center\" tbl-cap='Output of analytic P-Model using standard conditions.'}\n\n```{.r .cell-code  code-fold=\"true\"}\nrpmodel::rpmodel(\n  tc = tc_air, \n  vpd = vpd_air, \n  co2 = co2, \n  fapar = 1, \n  ppfd = ppfd, \n  patm = patm, \n  kphio = kphio\n) |> as_tibble() |> \n  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6) |> \n  relocate(vcmax, jmax, gs, chi, ci) |> knitr::kable()\n```\n\n::: {.cell-output-display}\n|    vcmax|     jmax|       gs|       chi|       ci|       gpp|    ca| gammastar|      kmm| ns_star|       xi|       mj|        mc|     iwue|  vcmax25|   jmax25|    rd|\n|--------:|--------:|--------:|---------:|--------:|---------:|-----:|---------:|--------:|-------:|--------:|--------:|---------:|--------:|--------:|--------:|-----:|\n| 41.17731| 66.51527| 0.881992| 0.7154304| 28.99639| 0.0001222| 40.53|     4.332| 70.84225|       1| 82.82301| 0.654916| 0.2470426| 7.208503| 4.12e-05| 6.65e-05| 6e-07|\n:::\n:::\n\n::: {#tbl-output-num .cell .column-page layout-align=\"center\" tbl-cap='Output of numerical P-Model using standard conditions.'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Numerical P-Model\noptimize_traits_and_costs(\n  tc_air = tc_air,\n  vpd_air = vpd_air,\n  patm = patm,\n  co2 = co2,\n  ppfd = ppfd,\n  kphio = kphio,\n) |>\n  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6) |> \n  relocate(vcmax, jmax, gs, chi, ci) |> knitr::kable()\n```\n\n::: {.cell-output-display}\n|    vcmax|    jmax|       gs|      chi|       ci|      a_c|      a_j|  a_gross|     ci_c|     ci_j|     iwue|      kmm| gammastar| ns_star| cost_transp| cost_vcmax| cost_jmax| carbon_costs|include_energy_balance | tc_air| tc_leaf|\n|--------:|-------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|---------:|-------:|-----------:|----------:|---------:|------------:|:----------------------|------:|-------:|\n| 55.15741| 115.661| 1.182008| 0.715532| 29.00051| 1.36e-05| 1.36e-05| 1.36e-05| 29.00051| 28.99605| 7.205929| 70.84225|     4.332|       1|    245.1011|   695.7776|  1.029291|     799.9531|FALSE                  |     25|      25|\n:::\n:::\n\n\n#### Cost function\n\nFrom @eq-rcc, we can tell that the smaller the value for a trait becomes, the smaller the gross assimilation becomes and thus the carbon costs become larger. Above the minimum, the carbon costs become larger because of additional limitations to photosynthesis that do not allow for an even increase in gross assimilation with increasing trait.\n\nIn @fig-cost-function, this sensitivity of the carbon costs against varying values of the different traits are displayed. As can be seen, there are distinct minima for the cost of transpiration ($g_s$) and for the cost of carboxylation ($V_{cmax}$). For the cost of electron transport however, there is no distinct minima ($J_{max}$).\n\nThe distinct minima for $V_{cmax}$ and $g_{s}$ occur where $A_{gross}$ switches from $A_{c}$-limitation to $A_{j}$-limitation, i.e., at the coordination point of $A_{c} = A_{j}$. At this point, increasing $V_{cmax}$ or $g_{s}$ only increases the costs without any gain in photosynthesis.\n\nIn @fig-cost-function, there is no distinct minimum visible for $J_{max}$ because its associated costs are comparably small; the cost-factor $\\beta$ is set to 146, whereas $c$ is set to 0.103. So, the algorithm finds a $J_{max}$ that is simply large enough to not cause $A_{j}$-limitation but once $A_{c}$ is limiting, $J_{max}$ can increase indefinitely because of its low costs. @fig-cost-function-zoom zooms in on the $Cost ~ J_{max}$ function, where the increase in costs with increasing $J_{max}$ is visible. However, this increase is so small that the algorithm does not pick it up in the optimization routine.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Get reference dataframe\nn_steps <- 50\ndf_base_cc <- tibble(.rows = n_steps)\n\ndf_base_cc$vcmax      <- rep(vcmax, n_steps)\ndf_base_cc$jmax       <- rep(jmax, n_steps)\ndf_base_cc$gs         <- rep(gs, n_steps)\ndf_base_cc$cost_total <- rep(NA, n_steps)\ndf_base_cc$cost_vcmax <- rep(NA, n_steps)\ndf_base_cc$cost_jmax  <- rep(NA, n_steps)\ndf_base_cc$cost_gs    <- rep(NA, n_steps)\n\ndf_cc <- tibble()\n\n# Calculate carbon costs\nloop_carbon_costs <- function(df_in, var) {\n  \n  for (i in 1:nrow(df_in)) {\n    \n    output <- \n      calculate_traits_and_costs(\n        par = c(df_in$vcmax[i],\n                df_in$jmax[i],\n                df_in$gs[i]),\n        tc_air = tc_air,\n        vpd_air = vpd_air,\n        ppfd = ppfd,\n        co2 = co2,\n        patm = patm,\n        kphio = kphio,\n        include_energy_balance = FALSE,\n        return_all = TRUE,\n        units_out_per_second = TRUE\n      )\n      \n      df_in$cost_total[i] <- output$carbon_costs\n      df_in$cost_vcmax[i] <- output$cost_vcmax\n      df_in$cost_jmax[i]  <- output$cost_jmax\n      df_in$cost_gs[i]    <- output$cost_transp\n      \n  }\n  \n  df_out <- \n    df_in |> \n    select(starts_with(\"cost\"), !!var) |> \n    # pivot_longer(\n    #   cols = starts_with(\"cost\"),\n    #   names_to = \"cost_name\",\n    #   values_to = \"cost_value\") |> \n    pivot_longer(\n      cols = !!var,\n      names_to = \"var\",\n      values_to = \"val\")\n  \n  return(df_out)               \n}\n\n## Run function\n# Vcmax\ndf_tmp <- df_base_cc\ndf_tmp$vcmax <- seq(vcmax/10, vcmax*10, length.out = n_steps)\n\ndf_tmp  <- loop_carbon_costs(df_tmp, \"vcmax\")\ndf_cc   <- rbind(df_cc, df_tmp)\n\n# Jmax\ndf_tmp <- df_base_cc\ndf_tmp$jmax <- seq(jmax/10, jmax*10, length.out = n_steps)\n\ndf_tmp  <- loop_carbon_costs(df_tmp, \"jmax\")\ndf_cc   <- rbind(df_cc, df_tmp)\n\n# gs\ndf_tmp <- df_base_cc\ndf_tmp$gs <- seq(gs/10, gs*10, length.out = n_steps)\n\ndf_tmp  <- loop_carbon_costs(df_tmp, \"gs\")\ndf_cc   <- rbind(df_cc, df_tmp)\n\n## Plot it\ndf_cc |> \n  ggplot() +\n  aes(x = val*1e6, y = cost_total) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~var, scales = \"free_x\") +\n  labs(title = \"Sensitivity of Carbon Costs\",\n       x = \"Trait value [mu mol/m^2/s]\",\n       y = \"Carbon Costs\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![Sensitivity of the carbon costs defined in @eq-rcc to changes in $V_{cmax}$, $J_{cmax}$, and $g_{s}$. Distinct optimal minima are visible for $V_{cmax}$ and $g_{s}$, but not for $J_{max}$.](03-algorithm_files/figure-html/fig-cost-function-1.png){#fig-cost-function fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_cc |> \n  ggplot() +\n  aes(x = val*1e6, y = cost_total) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~var, scales = \"free_x\") +\n  labs(title = \"Sensitivity of Carbon Costs (zoomed in)\",\n       x = \"Trait value [mu mol/m^2/s]\",\n       y = \"Carbon Costs\") +\n  theme_classic() + \n  ylim(750, 900)\n```\n\n::: {.cell-output-display}\n![Sensitivity of the carbon costs defined in @eq-rcc to changes in $V_{cmax}$, $J_{cmax}$, and $g_{s}$. Same plot as @fig-cost-function but zoomed in to show minor increase in costs with increasing $J_{cmax}.](03-algorithm_files/figure-html/fig-cost-function-zoom-1.png){#fig-cost-function-zoom fig-align='center' width=80%}\n:::\n:::\n\n\n### Energy Balance\n\nThe relevant functions are:\n\n::: {.callout-note collapse=\"true\"}\n## calculate_leaf_energy_balance()\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n#' Function to calculate the energy balance of a leaf\n#'\n#' @description This function calculates the energy balance of the leaf, given biotic and abiotic drivers. Output options are the difference between input-ed and calculated leaf temperature (\"balance\") or all calculated energy fluxes. Note: This functions has been taken from the {plantecophys} package and modified for new purposes here.\n#' \n#' @details This leaf energy balance model was adapted from Duursma, Remko A. 2015. “Plantecophys - An R Package for Analysing and Modelling Leaf Gas Exchange Data.” Edited by Paul C. Struik. <i>PLOS ONE</i> 10 (11): e0143346. https://doi.org/10/bkmj. It is based on the Penman-Monteith equation in appendix of Leuning, R., F. M. Kelliher, D. G. G. Pury, and E.-D. Schulze. 1995. “Leaf Nitrogen, Photosynthesis, Conductance and Transpiration: Scaling from Leaves to Canopies.” <i>Plant, Cell and Environment</i> 18 (10): 1183–1200. https://doi.org/10.1111/j.1365-3040.1995.tb00628.x.\n#'\n#' @param tc_leaf Assumed leaf Temperature [ºC]\n#' @param tc_air  Air Temperature [ºC]\n#' @param gs      Stomatal conductance of CO2 [mol/m2/s]\n#' @param ppfd    Photosynthetically Active Photon Flux Density [mol/m2/s]\n#' @param vpd_air Vapor pressure deficit of the air [Pa]\n#' @param patm    Atmospheric pressure [Pa]\n#' @param wind    Wind speed [m/s]\n#' @param leaf_size     Characteristic leaf width [m]\n#' @param stomata_ratio Stomatal ratio: 1 = Hypostomataous (stomata on one leaf side), 2 = Amphistomataous (stomata on both leaf sides) [-]\n#' @param leaf_abs      Leaf absorptance of solar radiation (range [0,1]) [-]\n#' @param return_what   Output to be returned (\"balance\" for squared difference between input and calculated leaf temperature, \"fluxes\" for all energy fluxes calculated by the energy balance)\n#'\ncalculate_leaf_energy_balance <- function(\n  tc_leaf       = 21.5, \n  tc_air        = 20,\n  gs            = 1.5e-6,\n  ppfd          = 1500e-6, \n  vpd_air       = 2000, \n  patm          = 101325,\n  wind          = 2, \n  leaf_size     = 0.02,\n  stomata_ratio = 1,\n  leaf_abs      = 0.5, \n  return_what   = c(\"balance\",\"fluxes\")\n  ){\n\n  # Define arguments\n  return_what <- match.arg(return_what)\n  \n  # Important!: Function uses different values than used in rpmodel\n  # gs from rpmodel is in mol CO2 / m2 / s / Pa\n  # gs here is in mol H2O / m2 / s\n  # Turning stomatal conductance of CO2 into conductance of H2O\n  gs   <- 1.6 * gs * patm\n  ppfd <- ppfd * 10^6 \n  \n  # Define constants\n  Boltz      <- 5.67 * 10^-8 # w M-2 K-4\n  Emissivity <- 0.95         # -\n  LatEvap    <- 2.54         # MJ kg-1\n  CPAIR      <- 1010.0       # J kg-1 K-1\n  \n  H2OLV0     <- 2.501e6      # J kg-1\n  H2OMW      <- 18e-3        # J kg-1\n  AIRMA      <- 29.e-3       # mol mass air (kg/mol)\n  AIRDENS    <- 1.204        # kg m-3\n  UMOLPERJ   <- 4.57         # Micromole photons per Joule [-]\n  DHEAT      <- 21.5e-6      # molecular diffusivity for heat\n  \n  # Density of dry air\n  AIRDENS <- patm / (287.058 * celsius_to_kelvin(tc_air))\n\n  # Latent heat of water vapour at air temperature (J mol-1)\n  LHV <- (H2OLV0 - 2.365E3 * tc_air) * H2OMW\n  \n  # Const s in Penman-Monteith equation  (Pa K-1)\n  SLOPE <- (esat(tc_air + 0.1) - esat(tc_air)) / 0.1\n  \n  # Radiation conductance (mol m-2 s-1)\n  Gradiation <- 4. * Boltz * celsius_to_kelvin(tc_air)^3 * Emissivity / (CPAIR * AIRMA)\n  \n  # See Leuning et al (1995) PC&E 18:1183-1200 Appendix E\n  # Boundary layer conductance for heat - single sided, forced convection\n  CMOLAR <- patm / (8.314 * celsius_to_kelvin(tc_air)) # .Rgas() in package...\n  Gbhforced <- 0.003 * sqrt(wind / leaf_size) * CMOLAR\n  \n  # Free convection\n  GRASHOF <- 1.6E8 * abs(tc_leaf - tc_air) * (leaf_size^3) # Grashof number\n  Gbhfree <- 0.5 * DHEAT * (GRASHOF^0.25) / leaf_size * CMOLAR\n  \n  # Total conductance to heat (both leaf sides)\n  Gbh <- 2 * (Gbhfree + Gbhforced)\n  \n  # Heat and radiative conductance\n  Gbhr <- Gbh + 2 * Gradiation\n  \n  # Boundary layer conductance for water (mol m-2 s-1)\n  Gbw <- stomata_ratio * 1.075 * Gbh # Leuning 1995\n  gw <- gs * Gbw / (gs + Gbw)\n  \n  # Longwave radiation\n  # (positive flux is heat loss from leaf)\n  Rlongup <- Emissivity * Boltz * celsius_to_kelvin(tc_leaf)^4\n  \n  # Rnet\n  Rsol <- 2 * ppfd / UMOLPERJ # W m-2\n  Rnet <- leaf_abs * Rsol - Rlongup # full\n  \n  # Isothermal net radiation (Leuning et al. 1995, Appendix)\n  ea <- esat(tc_air, patm) - vpd_air\n  ema <- 0.642 * (ea / celsius_to_kelvin(tc_air))^(1 / 7)\n  \n  # Safety Check\n  if (is.na(ema)){\n    stop(\"calculate_leaf_energy_balance: `ema` is NA, likely due to unrealistic combination of given vpd and air temperature (too high vpd for that air temperature).\")\n  }\n  \n  Rnetiso <- leaf_abs * Rsol - (1 - ema) * Boltz * celsius_to_kelvin(tc_air)^4\n  \n  # Isothermal version of the Penmon-Monteith equation\n  GAMMA <- CPAIR * AIRMA * patm / LHV\n  ET <- (1 / LHV) * (SLOPE * Rnetiso + vpd_air * Gbh * CPAIR * AIRMA) / (SLOPE + GAMMA * Gbhr / gw)\n  \n  # Latent heat loss\n  lambdaET <- LHV * ET\n  \n  # Heat flux calculated using Gradiation (Leuning 1995, Eq. 11)\n  Y <- 1 / (1 + Gradiation / Gbh)\n  H2 <- Y * (Rnetiso - lambdaET)\n  \n  # Heat flux calculated from leaf-air T difference.\n  # (positive flux is heat loss from leaf)\n  H <- -CPAIR * AIRDENS * (Gbh / CMOLAR) * (tc_air - tc_leaf)\n  \n  # Leaf-air temperature difference recalculated from energy balance.\n  # (same equation as above!)\n  tc_leaf2 <- tc_air + H2 / (CPAIR * AIRDENS * (Gbh / CMOLAR))\n  \n  # Difference between input tc_leaf and calculated, this will be minimized.\n  EnergyBal <- (tc_leaf - tc_leaf2)           # OLD, needed to work with uniroot()\n  # EnergyBal <- (tc_leaf - tc_leaf2)^2           # NEW, needed to work with optimr()\n  # EnergyBal <- abs(tc_leaf - tc_leaf2)        # NEW, needs more iterations than ()^2\n  \n  if (return_what == \"balance\") {\n    return(EnergyBal) # OLD\n  \n    # out <- list(tc_leaf       = tc_leaf,     # NEW\n    # \t\t\t\t\t\ttc_leaf_star  = tc_leaf2,    # NEW\n    # \t\t\t\t\t\teps           = EnergyBal) # NEW\n    # return(out)                            # NEW\n  }\n  \n  if (return_what == \"fluxes\") {\n    l <- data.frame(ELEAFeb = 1000 * ET, Gradiation = Gradiation, Rsol = Rsol, Rnetiso = Rnetiso, Rlongup = Rlongup, H = H, lambdaET = lambdaET, gw = gw, Gbh = Gbh, H2 = H2, tc_leaf2 = tc_leaf2)\n    return(l)\n  }\n}\n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## optimize_leaf_energy_balance()\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n#' Optimization of the leaf energy balance temperature difference\n#' \n#' @details This function minimizes the difference between input and energy-balance-closure leaf temperature calculated in calculation_leaf_energy_balance().\n#'\n#' @param tc_air Leaf temperature [ºC]\n#' @param vpd_air Leaf vapor pressure deficit [Pa]\n#' @param gs Stomatal conductance [µmol CO2 /m^2/s]\n#' @param ppfd Photosynthetically Active Photon Flux Density [µmol/m^2/s]\n#' @param patm Atmospheric pressure [Pa] \n#' @param ... Additional arguments to be piped \n#'\noptimize_leaf_energy_balance <- function(\n    tc_air,\n    vpd_air,\n    gs,\n    ppfd,\n    patm,\n    ...) { # ... for any additional leaf energy balance parameter like wind\n      \n    ## IN DEV:\n    sol_optimize <- uniroot(\n      f             = calculate_leaf_energy_balance,\n      interval      = c(max(tc_air - 15, 1), tc_air + 15),\n      # interval      = c(0, 50),\n      tc_air        = tc_air,\n      vpd_air       = vpd_air,\n      gs            = gs,\n      ppfd          = ppfd,\n      patm          = patm,\n      return_what   = \"balance\",\n      ...\n    )\n    \n    tc_leaf <- sol_optimize$root\n    \n    return(tc_leaf)\n    \n    ## TODO: OPTIM() AND OPTIMR() BELOW CRASH FOR SOME REASON...\n    \n    # out_optim <- optimr::optimr(\n    #     \n    #     ## Optimization inputs:\n    #     par        = tc_air,\n    #     lower      = 1,\n    #     upper      = 40,\n    #     fn         = diff_tcleaf_in_and_tcleaf_eb,\n    #     method     = \"L-BFGS-B\",\n    #     control    = list(maxit = 1000),\n    #     \n    #     ## Function inputs:\n    #     tc_air = tc_air,\n    #     ppfd = ppfd,\n    #     patm = patm,\n    #     co2 = co2,\n    #     vpd = vpd,\n    #     kphio = kphio,\n    #     method_jmaxlim_inst = method_jmaxlim_inst,\n    #     method_eb = method_eb)\n    #     \n    # out_optim <- optim(\n    # \n    #     ## Optimization inputs:\n    #     par        = tc_air,\n    #     lower      = 1,\n    #     upper      = 40,\n    #     fn         = diff_tcleaf_in_and_tcleaf_eb,\n    #     method     = \"L-BFGS-B\",\n    #     control    = list(maxit = 1000),\n    # \n    #     ## Function inputs:\n    #     tc_air = tc_air,\n    #     ppfd = ppfd,\n    #     patm = patm,\n    #     co2 = co2,\n    #     vpd = vpd,\n    #     kphio = kphio,\n    #     method_jmaxlim_inst = method_jmaxlim_inst,\n    #     method_eb = method_eb)\n}\n```\n:::\n:::\n\n:::\n\nBelow is a demonstration of the energy balance functions and a sensitivity analysis.\nThe difference between input leaf temperature and energy-balance-closure leaf temperature is:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\ncalculate_leaf_energy_balance(  \n  tc_leaf       = tc_leaf, \n  tc_air        = tc_air,\n  gs            = gs,\n  ppfd          = ppfd, \n  vpd_air       = vpd_air, \n  patm          = patm,\n  return_what   = c(\"balance\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.933511\n```\n:::\n:::\n\n\nThe energy balance variables under the given conditions are: \n\n\n::: {.cell layout-align=\"center\" tbl-cap='Energy balance output at given difference between input and energy-balance-closure leaf temperature.'}\n\n```{.r .cell-code  code-fold=\"false\"}\ncalculate_leaf_energy_balance(  \n  tc_leaf       = tc_leaf, \n  tc_air        = tc_air,\n  gs            = gs,\n  ppfd          = ppfd, \n  vpd_air       = vpd_air, \n  patm          = patm,\n  return_what   = c(\"fluxes\")\n) |> knitr::kable()\n```\n\n::: {.cell-output-display}\n|  ELEAFeb| Gradiation|     Rsol|  Rnetiso| Rlongup|        H| lambdaET|        gw|      Gbh|       H2| tc_leaf2|\n|--------:|----------:|--------:|--------:|-------:|--------:|--------:|---------:|--------:|--------:|--------:|\n| 2.562691|  0.1949628| 218.8184| 29.60964| 454.922| 416.2046| 112.6399| 0.2252718| 2.845609| -77.7063| 24.06649|\n:::\n:::\n\n\nAfter minimizing the difference between input and energy-balance-closure leaf temperature, the final predicted leaf temperature is: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\noptimize_leaf_energy_balance(\n tc_air  = tc_air,\n vpd_air = vpd_air,\n gs      = gs,\n ppfd    = ppfd,\n patm    = patm,\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24.04191\n```\n:::\n:::\n\n\n#### Sensitivity Analysis\n\n##### Abiotic drivers\n\nAs shown in @fig-tleaf-abiotic and @fig-dtleaf-abiotic. The main abiotic drivers of the modeled leaf temperature are variables that directly drive the leave's energy input: light and air temperature. The air temperature is the main driver of leaf temperature. Interestingly, the energy balance model simulates a strong decoupling of leaf and air temperatures. At low air temperatures, the leaf is warmer than the air. And at high air temperatures, the leaf is cooler. This is likely driven by the co-occurring temperature-driven change in vapor pressure deficit that increases evaporative cooling.\n\nThe incoming light is the main source of short-wave energy input, and is therefore also a strong driver of leaf temperature. At low light levels, leaves are modeled to be cooler than air. At high light values, however, the leaf becomes substantially warmer than the air.\n\nAt higher wind speeds, the boundary conductance layer becomes thinner (i.e., the boundary layer conductance increases). This drives an equilibration of leaf and air temperatures, so that there is less decoupling at high wind speeds.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Define function first --------------------------------------------------------\nrun_fun <- function(df, var) {\n  \n  for (i in 1:nrow(df)) {\n    \n    # print(i)\n    \n    df$tc_leaf[i] <- \n      optimize_leaf_energy_balance(\n        tc_air  = df$tc_air[i],\n        vpd_air = df$vpd_air[i],\n        gs      = df$gs[i],\n        ppfd    = df$ppfd[i],\n        patm    = df$patm[i],\n        wind    = df$wind[i],\n        leaf_size = df$leaf_size[i],\n        stomata_ratio = df$stomata_ratio[i],\n        leaf_abs = df$leaf_abs[i]\n        )\n    \n      df$tc_diff[i] = df$tc_leaf[i] - df$tc_air[i]\n  }\n  \n  df_out <- df |> \n    select(c(!!var, \"tc_leaf\", \"tc_diff\")) |> \n    pivot_longer(cols = !!var)\n  \n  return(df_out)\n}\n\n# Create empty df for plotting  ------------------------------------------------\ndf_abio <- tibble()\ndf_bio  <- tibble()\n\n# Create base df for sensitivity analysis  -------------------------------------\nn_steps <- 20\ndf_base <- tibble(.rows = n_steps)\ndf_base$tc_air    <- rep(tc_air  , n_steps)\ndf_base$vpd_air   <- rep(vpd_air , n_steps)\ndf_base$gs        <- rep(gs      , n_steps)\ndf_base$co2       <- rep(co2     , n_steps)\ndf_base$ppfd      <- rep(ppfd    , n_steps)\ndf_base$patm      <- rep(patm    , n_steps)\ndf_base$wind      <- rep(wind    , n_steps)\ndf_base$leaf_size <- rep(leaf_size, n_steps)\ndf_base$leaf_abs  <- rep(leaf_abs, n_steps)\ndf_base$tc_leaf   <- rep(NA, n_steps)\ndf_base$tc_diff   <- rep(NA, n_steps)\ndf_base$stomata_ratio   <- rep(1, stomata_ratio)\ndf_base$kphio     <- rep(kphio, stomata_ratio)\n\n# Run function across all variables  -------------------------------------------\n\n### ABIOTIC VARIABLES \n## Air temperature and VPD\ndf_tmp <- df_base\ndf_tmp$tc_air  <- seq(1, 50, length.out = n_steps)\n\n# Account for changes in vpd when temperature changes:\ndf_tmp$vpd_air <- \n  air_vpd_to_leaf_vpd(\n    vpd_air = vpd_air,\n    tc_air = tc_air,\n    tc_leaf = df_tmp$tc_air)\n\n# Removing negative vpd values\n# df_tmp <- mutate(df_tmp, vpd_air = ifelse(vpd_air < 0, 10, vpd_air))\n\ndf_tmp <- run_fun(df_tmp, \"tc_air\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n# VPD\ndf_tmp <- df_base\ndf_tmp$vpd_air  <- seq(vpd_air/2, vpd_air*2, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"vpd_air\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n# PPFD\ndf_tmp <- df_base\ndf_tmp$ppfd  <- seq(ppfd/10, ppfd*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"ppfd\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n# Atmospheric pressure\ndf_tmp <- df_base\ndf_tmp$patm  <- seq(patm/10, patm*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"patm\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n# Wind\ndf_tmp <- df_base\ndf_tmp$wind  <- seq(wind/10, wind*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"wind\")\ndf_abio <- rbind(df_abio, df_tmp)\n\n### BIOTIC VARIABLES\n# Stomatal Conductance\ndf_tmp <- df_base\ndf_tmp$gs  <- seq(gs/10, gs*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"gs\")\ndf_bio <- rbind(df_bio, df_tmp)\n\n# Leaf Size\ndf_tmp <- df_base\ndf_tmp$leaf_size  <- seq(leaf_size/10, leaf_size*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"leaf_size\")\ndf_bio <- rbind(df_bio, df_tmp)\n\n# Leaf absorptance\ndf_tmp <- df_base\ndf_tmp$leaf_abs  <- seq(leaf_abs/10, leaf_abs*10, length.out = n_steps)\n\ndf_tmp <- run_fun(df_tmp, \"leaf_abs\")\ndf_bio <- rbind(df_bio, df_tmp)\n\n# Stomatal Ratio\ndf_tmp <- df_base |> slice(1:2)\ndf_tmp$stomata_ratio  <- c(1, 2)\n\ndf_tmp <- run_fun(df_tmp, \"stomata_ratio\")\ndf_bio <- rbind(df_bio, df_tmp)\n\ndf_abio$name <- as.factor(df_abio$name)\ndf_bio$name <- as.factor(df_bio$name)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_abio |> \n  ggplot() +\n  aes(x = value,\n      y = tc_leaf) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(0, 50) + \n  labs(title = \"Sensitivity of tc_leaf to abiotic drivers.\",\n       y = \"T_leaf [ºC]\",\n       x = \"Variable value\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![Sensitivity of modeled leaf temperature to abiotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions. For the sensitivity to air temperature, however, the temperature-driven change in vapor pressure deficit is additionally accounted for. The energy model breaks if too low temperatures and high vapor pressure deficits at low air temperatures are entered.](03-algorithm_files/figure-html/fig-tleaf-abiotic-1.png){#fig-tleaf-abiotic fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_abio |> \n  ggplot() +\n  aes(x = value,\n      y = tc_diff) +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(-7.5, 7.5) +\n  labs(title = \"Sensitivity of delta T to abiotic drivers\",\n       subtitle = \"Below dotted line means the leaf is cooler\",\n       y = \"T_leaf - T_air [ºC]\",\n       x = \"Variable value\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![Sensitivity of the difference between modeled leaf temperature and air temperature to abiotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions.](03-algorithm_files/figure-html/fig-dtleaf-abiotic-1.png){#fig-dtleaf-abiotic fig-align='center' width=80%}\n:::\n:::\n\n\n##### Biotic drivers\n\nAgain, the main drivers of leaf temperature are variables that directly influence the amount of energy taken up or released by the leaf: stomatal conductance and leaf absorptance (see @fig-tleaf-biotic and @fig-dtleaf-biotic). The larger the stomatal conductance, the more transpirative cooling occurs, the stronger the leaf is cooled. However, this increase has a saturating effect and the same increase in stomatal conductance does not always lead to the same decrease in leaf temperature. The leaf absorptance controls how much of the incoming short-wave radiation is absorbed by the leaf and therefore scales leaf temperatures linearly. Smaller leaves have smaller boundary layers and their temperature are thus more quickly equilibrated with air temperatures. Interestingly, given the standard conditions here, a larger leaf leads to constantly cooler leaves.\n\n::: callout-warning\nIn general, the model analysis shows that leaves can cool significantly below air temperatures. However, this could be an artifact of picking a relatively high stomatal conductance that drives this cooling. Real-world situations may have substantially lower values for stomatal conductance leading to less cooling.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_bio |> \n  ggplot() +\n  aes(x = value,\n      y = tc_leaf) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(0, 50) + \n  labs(title = \"Sensitivity of tc_leaf to biotic drivers.\",\n       y = \"T_leaf [ºC]\",\n       x = \"Variable value\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![Sensitivity of modeled leaf temperature to biotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions.](03-algorithm_files/figure-html/fig-tleaf-biotic-1.png){#fig-tleaf-biotic fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_bio |> \n  ggplot() +\n  aes(x = value,\n      y = tc_diff) +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(-7.5, 7.5) +\n  labs(title = \"Sensitivity of delta T to biotic drivers\",\n       subtitle = \"Below dotted line means the leaf is cooler\",\n       y = \"T_leaf - T_air [ºC]\",\n       x = \"Variable value\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![Sensitivity of the difference between modeled leaf temperature and air temperature to biotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions.](03-algorithm_files/figure-html/fig-dtleaf-biotic-1.png){#fig-dtleaf-biotic fig-align='center' width=80%}\n:::\n:::\n\n\n### Coupled Model\n\nBelow is a demonstration for the predictions of the numerical P-Model with and without the energy balance coupled. By comparing @tbl-pmodel-wo-eb and @tbl-pmodel-wi-eb below, we see that under standard conditions, the coupled model tends to predict a lower $V_{cmax}$ and $T_{leaf}$; a higher $g_{s}$ and $\\chi$; and a similar $J_{max}$.\n\n@fig-traits-tcair-eb shows how this difference of predicted traits plays out along a gradient of air temperatures. First of all, it is clearly visible that there are numerical instabilities occurring at low air temperatures. As explained above and re-emphasized in the box below, this is likely due to the delicate sensitivity of the energy balance model to the given input of vapor pressure deficit and air temperature. \n\nNonetheless, two important dynamics can be identified: First, attaching the energy balance frees stomatal conductance to regulate leaf temperatures. At low temperatures, the model predicts that it is beneficial to have increase leaf temperatures to reduce carbon costs. However, it is important to note that this could also be a consequence of the forcing to the energy balance itself (see @fig-dtleaf-abiotic and box below). Vice versa, there is a tendency to increase stomatal conductance at high air temperatures to cool leaves and thereby minimize the carbon costs. \n\nThese higher leaf temperatures translate to the second dynamic to highlight: We see a reduction in predicted $V_{cmax}$ at these high temperatures, as it is predicted by the Least-Cost Hypothesis: At higher temperatures, costs can be reduced by reducing investments into $V_{cmax}$ whilst still benefiting from increasing assimilation due to faster enzyme kinetics. In theory, this should also apply to $J_{max}$. However, due to its minor influence on the overall costs - as described above - there is no clear change in its prediction when coupling the energy balance model.\n\n::: callout-warning\n## An important note on the results shown below.\n\nNote that the assumed vapor pressure deficit, how it changes with air temperature, and how it plays into stomatal conductance is **highly influential** on the numerical stability of the entire routine. We are not using any real-world data here, which causes the temperature-driven vapor pressure deficit calculation to likely have unrealistically low (or strongly negative) values. As a consequence, the effect of having warmer leaf-than-air temperatures may be a forcing artifact!\n:::\n\n##### Standard Conditions\n\n\n::: {#tbl-pmodel-wo-eb .cell .column-page layout-align=\"center\" tbl-cap='Output of numerical P-Model without coupled energy balance model, under standard conditions.'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Numerical P-Model\noptimize_traits_and_costs(\n  tc_air = tc_air,\n  vpd_air = vpd_air,\n  patm = patm,\n  co2 = co2,\n  ppfd = ppfd,\n  kphio = kphio,\n  include_energy_balance = FALSE\n) |>\n  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6, a_gross = a_gross * 1e6) |> \n  relocate(vcmax, jmax, gs, chi, ci, a_gross) |> knitr::kable()\n```\n\n::: {.cell-output-display}\n|    vcmax|    jmax|       gs|      chi|       ci|  a_gross|      a_c|      a_j|     ci_c|     ci_j|     iwue|      kmm| gammastar| ns_star| cost_transp| cost_vcmax| cost_jmax| carbon_costs|include_energy_balance | tc_air| tc_leaf|\n|--------:|-------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|--------:|---------:|-------:|-----------:|----------:|---------:|------------:|:----------------------|------:|-------:|\n| 55.15741| 115.661| 1.182008| 0.715532| 29.00051| 13.62794| 1.36e-05| 1.36e-05| 29.00051| 28.99605| 7.205929| 70.84225|     4.332|       1|    245.1011|   695.7776|  1.029291|     799.9531|FALSE                  |     25|      25|\n:::\n:::\n\n::: {#tbl-pmodel-wi-eb .cell .column-page layout-align=\"center\" tbl-cap='Output of numerical P-Model with coupled energy balance model, under standard conditions.'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Coupled Numerical P-Model\n# To call the coupled model, simply set `include_energy_balance == TRUE`\n\noptimize_traits_and_costs(\n  tc_air = tc_air,\n  vpd_air = vpd_air,\n  patm = patm,\n  co2 = co2,\n  ppfd = ppfd,\n  kphio = kphio,\n  include_energy_balance = TRUE\n) |>\n  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6, a_gross = a_gross * 1e6) |> \n  relocate(vcmax, jmax, gs, chi, ci, a_gross) |> knitr::kable()\n```\n\n::: {.cell-output-display}\n|    vcmax|     jmax|       gs|       chi|       ci|  a_gross|     a_c|     a_j|     ci_c|     ci_j|    iwue|      kmm| gammastar| ns_star| cost_transp| cost_vcmax| cost_jmax| carbon_costs|include_energy_balance | tc_air|  tc_leaf|\n|--------:|--------:|--------:|---------:|--------:|--------:|-------:|-------:|--------:|--------:|-------:|--------:|---------:|-------:|-----------:|----------:|---------:|------------:|:----------------------|------:|--------:|\n| 51.76301| 115.6061| 1.353449| 0.7441638| 30.16096| 14.03397| 1.4e-05| 1.4e-05| 30.16096| 30.15953| 6.48065| 65.79614|  4.145103| 1.01989|    255.8348|   652.9593|  1.028801|     750.3477|TRUE                   |     25| 24.14085|\n:::\n:::\n\n\n##### Sensitivity Analysis\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n## Air temperature and VPD\ndf_tmp <- df_base\ndf_tmp$tc_air  <- seq(1, 50, length.out = n_steps)\ndf_tmp$data    <- NA\n\n# Account for changes in vpd when temperature changes:\ndf_tmp$vpd_air <- \n  air_vpd_to_leaf_vpd(\n    vpd_air = vpd_air,\n    tc_air = tc_air,\n    tc_leaf = df_tmp$tc_air)\n\n# Removing negative vpd values\n# df_tmp <- mutate(df_tmp, vpd_air = ifelse(vpd_air < 0, 0, vpd_air))\n\n# With and Without EB\ndf_with_eb <- df_tmp\ndf_wout_eb <- df_tmp\n\n# Run loop\nfor (i in 1:nrow(df_tmp)) {\n  \n  # cat(\"\\n Working on\", i, \"/\", nrow(df_tmp))\n  \n  df_with_eb$data[i] <- \n    optimize_traits_and_costs(\n      tc_air  = df_with_eb$tc_air[i],\n      vpd_air = df_with_eb$vpd_air[i],\n      ppfd    = df_with_eb$ppfd[i],\n      patm    = df_with_eb$patm[i],\n      co2     = df_with_eb$co2[i],\n      kphio   = df_with_eb$kphio[i],\n      include_energy_balance = TRUE\n      ) |> list()\n  \n  df_wout_eb$data[i] <- \n    optimize_traits_and_costs(\n      tc_air  = df_wout_eb$tc_air[i],\n      vpd_air = df_wout_eb$vpd_air[i],\n      ppfd    = df_wout_eb$ppfd[i],\n      patm    = df_wout_eb$patm[i],\n      co2     = df_wout_eb$co2[i],\n      kphio   = df_wout_eb$kphio[i],\n      include_energy_balance = FALSE\n      ) |> list()\n}\n\n# Finish up dataframes\n\nvars_tc <- c(\"tc_air\", \"tc_leaf\", \"tc_diff\")\nvars_pm <- c(\"vcmax\", \"jmax\", \"gs\", \"chi\")\n\ndf_with_eb <- \n  df_with_eb |> \n  select(data) |> \n  unnest(data) |>\n  select(any_of(c(vars_tc, vars_pm))) |> \n  mutate(tc_diff = tc_leaf - tc_air) |> \n  pivot_longer(cols = !any_of(vars_tc)) |> \n  mutate(name = as.factor(name))\n\ndf_wout_eb <- \n  df_wout_eb |> \n  select(data) |> \n  unnest(data) |>\n  select(any_of(c(vars_tc, vars_pm))) |> \n  mutate(tc_diff = tc_leaf - tc_air) |> \n  pivot_longer(cols = !any_of(vars_tc)) |> \n  mutate(name = as.factor(name))\n\ndf_fin <- \n  rbind(\n    df_wout_eb |> mutate(energy_balance = FALSE),\n    df_with_eb |> mutate(energy_balance = TRUE)\n    )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_fin |> \n  ggplot() +\n  aes(y = value,\n      x = tc_air,\n      color = energy_balance) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_y\") +\n  labs(title = \"Sensitivity of traits to tc_air\",\n       x = \"T_air [ºC]\",\n       y = \"Trait Value\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![Sensitivity of predicted optimal traits to whether the energy balance model is coupled or not.](03-algorithm_files/figure-html/fig-traits-tcair-eb-1.png){#fig-traits-tcair-eb fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_fin |> \n  select(tc_air, tc_diff, energy_balance) |> \n  distinct() |> \n  ggplot() +\n  aes(y = tc_diff,\n      x = tc_air,\n      color = energy_balance) +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Sensitivity of air-to-leaf temperature difference to tc_air\",\n       subtitle = \"Below the dotted line means the leaf is cooler than air\",\n       x = \"T_air [ºC]\",\n       y = \"T_leaf - T_air [ºC]\") +\n  ylim(-8, 8) +\n  theme_classic() \n```\n\n::: {.cell-output-display}\n![Sensitivity of the leaf-to-air temperature difference to changes in air temperatures for the coupled and non-coupled models. Note that the non-coupled model does not model any leaf temperature and simply assumed air and leaf temperatures are the same.](03-algorithm_files/figure-html/fig-dt-tcair-eb-1.png){#fig-dt-tcair-eb fig-align='center' width=80%}\n:::\n:::\n\n\n#### Cost Function Sensitivity\n\n@fig-cost-function-eb shows that coupling the energy balance does not alter the existence of distinct minima. As in @fig-cost-function, there are distinct minima for $V_{cmax}$ and $g_{s}$. $J_{max}$ also has a minima but due to its little influence on the carbon costs, the optimization algorithm cannot find that minima and tends to predict too high values for $J_{max}$.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Get reference dataframe\nn_steps <- 50\ndf_base_cc <- tibble(.rows = n_steps)\n\ndf_base_cc$vcmax      <- rep(vcmax, n_steps)\ndf_base_cc$jmax       <- rep(jmax, n_steps)\ndf_base_cc$gs         <- rep(gs, n_steps)\ndf_base_cc$cost_total <- rep(NA, n_steps)\ndf_base_cc$cost_vcmax <- rep(NA, n_steps)\ndf_base_cc$cost_jmax  <- rep(NA, n_steps)\ndf_base_cc$cost_gs    <- rep(NA, n_steps)\n\ndf_cc <- tibble()\n\n# Calculate carbon costs\nloop_carbon_costs <- function(df_in, var) {\n  \n  for (i in 1:nrow(df_in)) {\n    \n    output <- \n      calculate_traits_and_costs(\n        par = c(df_in$vcmax[i],\n                df_in$jmax[i],\n                df_in$gs[i]),\n        tc_air = tc_air,\n        vpd_air = vpd_air,\n        ppfd = ppfd,\n        co2 = co2,\n        patm = patm,\n        kphio = kphio,\n        include_energy_balance = TRUE,\n        return_all = TRUE,\n        units_out_per_second = TRUE\n      )\n      \n      df_in$cost_total[i] <- output$carbon_costs\n      df_in$cost_vcmax[i] <- output$cost_vcmax\n      df_in$cost_jmax[i]  <- output$cost_jmax\n      df_in$cost_gs[i]    <- output$cost_transp\n      \n  }\n  \n  df_out <- \n    df_in |> \n    select(starts_with(\"cost\"), !!var) |> \n    # pivot_longer(\n    #   cols = starts_with(\"cost\"),\n    #   names_to = \"cost_name\",\n    #   values_to = \"cost_value\") |> \n    pivot_longer(\n      cols = !!var,\n      names_to = \"var\",\n      values_to = \"val\")\n  \n  return(df_out)               \n}\n\n## Run function\n# Vcmax\ndf_tmp <- df_base_cc\ndf_tmp$vcmax <- seq(vcmax/10, vcmax*10, length.out = n_steps)\n\ndf_tmp  <- loop_carbon_costs(df_tmp, \"vcmax\")\ndf_cc   <- rbind(df_cc, df_tmp)\n\n# Jmax\ndf_tmp <- df_base_cc\ndf_tmp$jmax <- seq(jmax/10, jmax*10, length.out = n_steps)\n\ndf_tmp  <- loop_carbon_costs(df_tmp, \"jmax\")\ndf_cc   <- rbind(df_cc, df_tmp)\n\n# gs\ndf_tmp <- df_base_cc\ndf_tmp$gs <- seq(gs/10, gs*10, length.out = n_steps)\n\ndf_tmp  <- loop_carbon_costs(df_tmp, \"gs\")\ndf_cc   <- rbind(df_cc, df_tmp)\n\n## Plot it\ndf_cc |> \n  ggplot() +\n  aes(x = val*1e6, y = cost_total) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~var, scales = \"free_x\") +\n  labs(title = \"Sensitivity of Carbon Costs (with energy balance)\",\n       x = \"Trait value [mu mol/m^2/s]\",\n       y = \"Relative Carbon Costs\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![Sensitivity of the carbon costs defined in @eq-rcc to changes in $V_{cmax}$, $J_{cmax}$, and $g_{s}$ when energy balance is coupled.](03-algorithm_files/figure-html/fig-cost-function-eb-1.png){#fig-cost-function-eb fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_cc |> \n  ggplot() +\n  aes(x = val*1e6, y = cost_total) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~var, scales = \"free_x\") +\n  labs(title = \"Sensitivity of Carbon Costs (with energy balance)\",\n       x = \"Trait value [mu mol/m^2/s]\",\n       y = \"Relative Carbon Costs\") +\n  theme_classic() +\n  ylim(750, 900)\n```\n\n::: {.cell-output-display}\n![Sensitivity of the carbon costs defined in @eq-rcc to changes in $V_{cmax}$, $J_{cmax}$, and $g_{s}$ when energy balance is coupled. Same plot as @fig-cost-function-eb but zoomed in to show minor increase in costs with increasing $J_{cmax}$.](03-algorithm_files/figure-html/fig-cost-function-eb-zoomed-1.png){#fig-cost-function-eb-zoomed fig-align='center' width=80%}\n:::\n:::\n",
    "supporting": [
      "03-algorithm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}