# Algorithm {#sec-algorithm}

```{r setup, include=FALSE}
source(here::here("R/_setup.R"))
```

## Description

The goal of this algorithm is to predict a leaf temperature at which the costs for maintaining photosynthesis are minimal. To do this, two optimization algorithms are required as displayed in @fig-optimization-algorithm, the numerical P-Model algorithm and the energy balance algorithm.

The **numerical P-Model algorithm** solves the optimization problem to find the values for $V_{cmax}$, $J_{max}$, and $g_{s}$ at which the carbon costs for maintaining photosynthesis are minimal (explained in @sec-theory):

$$
\frac{\beta \;V_{cmax} + 1.6\;D\;g_s + c \;J_{max} }{A_{gross}} = min.
$$ {#eq-rcc2}

The **energy balance algorithm** searches for the leaf temperature that closes the energy budget described in @sec-leb. Certain terms within the energy balance depend on assuming a leaf temperature in the first place. This turns the algorithm into an optimization problem where the goal is to minimize the difference between the initially assumed leaf temperature ($T_{\text{leaf, init}}$) and the leaf temperature that closes the energy balance ($T_{\text{leaf, eb}}$):

$$
T_{\text{leaf, init}} - T_{\text{leaf, eb}} = min.
$$ {#eq-leb-criteria}

The algorithm visualized in @fig-optimization-algorithm reads as follows:

```         
1. Pick random values for vcmax, jmax, gs
2. Pick random value for tc_leaf (initial leaf temperature)
3. Calculate the energy balanced given tc_leaf, gs, abiotic environment
4. Check if initial tc_leaf equals tc_leaf that closes the energy balance:
   If false, re-run energy balance with a new tc_leaf
   If true, then proceed
5. Use tc_leaf, vcmax, jmax, gs, abiotic environment to calculate the carbon costs
6. Check if carbon costs are minimal
   If false, re-start at 1. with new parameters for vcmax, jmax, and gs
   If true, return tc_leaf, vcmax, jmax, gs
```

```{r}
#| echo: false
#| label: fig-optimization-algorithm
#| fig-align: center
#| fig-cap: "Algorithm for calculating optimal traits using the numerical P-Model coupled to a leaf energy balance model. The numerical P-Model parts are in purple. The energy balance model parts are in orange. Note that $J_{max}$ is implemented here for reasons of completeness. The current optimization routine does not properly optimize $J_{max}$."
knitr::include_graphics("figures/optimization_scheme.svg")
```

## Implementation

The individual algorithms described above are based on two functions - one function to calculate the quantity to be optimized and one function for handling the optimization. Below are demonstrations for calling the algorithms separately and coupled. All functions can be found in the `R` directory of this repository.

First, let's set the variables for standard conditions that are used for example runs and the sensitivity analyses below.

```{r}
# Get reference values for standard conditions
## Climate
tc_air  <- 25     # degC
tc_leaf <- 30     # degC
vpd_air <- 1500   # Pa
patm    <- 101325 # Pa
co2     <- 400    # ppm
ppfd    <- 500e-6 # mol/m2/s
fapar   <- 1      # -

## Traits
vcmax   <- 50e-6  # mol/m2/s
jmax    <- 100e-6 # mol/m2/s
gs      <- 1.5e-6 # mol CO2 /m2/s/Pa
kphio   <- 0.087  # -
beta    <- 146    # -
c_cost  <- 0.103  # -
wind          <-  2    # m/s
leaf_size     <-  0.02 # m
stomata_ratio <-  1    # -
leaf_abs      <-  0.5  # -
```

### Numerical P-Model

The relevant functions are:

::: {.callout-note collapse="true"}
## calculate_traits_and_costs()

```{r, echo=FALSE}
writeLines(readLines(here::here("R/calculate_traits_and_costs.R")))
```
:::

::: {.callout-note collapse="true"}
## get_carbon_costs()

```{r, echo=FALSE}
writeLines(readLines(here::here("R/get_carbon_costs.R")))
```
:::

::: {.callout-note collapse="true"}
## optimize_traits_and_costs()

```{r, echo=FALSE}
writeLines(readLines(here::here("R/optimize_traits_and_costs.R")))
```
:::

#### Comparison Against Analytical Solution

Below is a demonstration of the numerical P-Model algorithm without considering the leaf energy balance. Comparing the results of the numerical P-Model against the analytic P-Model shows that they achieve a similar $\chi \approx0.715$ but with quite different values for $V_{cmax}$, $J_{cmax}$, and $g_{s}$. This issue is explained further below.

```{r}
#| code-fold: true
#| column: page
#| label: tbl-output-ana
#| tbl-cap: "Output of analytic P-Model using standard conditions."
rpmodel::rpmodel(
  tc = tc_air, 
  vpd = vpd_air, 
  co2 = co2, 
  fapar = 1, 
  ppfd = ppfd, 
  patm = patm, 
  kphio = kphio
) |> as_tibble() |> 
  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6) |> 
  relocate(vcmax, jmax, gs, chi, ci) |> knitr::kable()
```

```{r}
#| code-fold: true
#| column: page
#| label: tbl-output-num
#| tbl-cap: "Output of numerical P-Model using standard conditions."

# Numerical P-Model
optimize_traits_and_costs(
  tc_air = tc_air,
  vpd_air = vpd_air,
  patm = patm,
  co2 = co2,
  ppfd = ppfd,
  kphio = kphio,
) |>
  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6) |> 
  relocate(vcmax, jmax, gs, chi, ci) |> knitr::kable()
```

#### Cost function

From @eq-rcc, we can tell that the smaller the value for a trait becomes, the smaller the gross assimilation becomes and thus the carbon costs become larger. Above the minimum, the carbon costs become larger because of additional limitations to photosynthesis that do not allow for an even increase in gross assimilation with increasing trait.

In @fig-cost-function, this sensitivity of the carbon costs against varying values of the different traits are displayed. As can be seen, there are distinct minima for the cost of transpiration ($g_s$) and for the cost of carboxylation ($V_{cmax}$). For the cost of electron transport however, there is no distinct minima ($J_{max}$).

The distinct minima for $V_{cmax}$ and $g_{s}$ occur where $A_{gross}$ switches from $A_{c}$-limitation to $A_{j}$-limitation, i.e., at the coordination point of $A_{c} = A_{j}$. At this point, increasing $V_{cmax}$ or $g_{s}$ only increases the costs without any gain in photosynthesis.

In @fig-cost-function, there is no distinct minimum visible for $J_{max}$ because its associated costs are comparably small; the cost-factor $\beta$ is set to 146, whereas $c$ is set to 0.103. So, the algorithm finds a $J_{max}$ that is simply large enough to not cause $A_{j}$-limitation but once $A_{c}$ is limiting, $J_{max}$ can increase indefinitely because of its low costs. @fig-cost-function-zoom zooms in on the $Cost ~ J_{max}$ function, where the increase in costs with increasing $J_{max}$ is visible. However, this increase is so small that the algorithm does not pick it up in the optimization routine.

```{r}
#| code-fold: true
#| label: fig-cost-function
#| fig-cap: "Sensitivity of the carbon costs defined in @eq-rcc to changes in $V_{cmax}$, $J_{cmax}$, and $g_{s}$. Distinct optimal minima are visible for $V_{cmax}$ and $g_{s}$, but not for $J_{max}$."

# Get reference dataframe
n_steps <- 50
df_base_cc <- tibble(.rows = n_steps)

df_base_cc$vcmax      <- rep(vcmax, n_steps)
df_base_cc$jmax       <- rep(jmax, n_steps)
df_base_cc$gs         <- rep(gs, n_steps)
df_base_cc$cost_total <- rep(NA, n_steps)
df_base_cc$cost_vcmax <- rep(NA, n_steps)
df_base_cc$cost_jmax  <- rep(NA, n_steps)
df_base_cc$cost_gs    <- rep(NA, n_steps)

df_cc <- tibble()

# Calculate carbon costs
loop_carbon_costs <- function(df_in, var) {
  
  for (i in 1:nrow(df_in)) {
    
    output <- 
      calculate_traits_and_costs(
        par = c(df_in$vcmax[i],
                df_in$jmax[i],
                df_in$gs[i]),
        tc_air = tc_air,
        vpd_air = vpd_air,
        ppfd = ppfd,
        co2 = co2,
        patm = patm,
        kphio = kphio,
        include_energy_balance = FALSE,
        return_all = TRUE,
        units_out_per_second = TRUE
      )
      
      df_in$cost_total[i] <- output$carbon_costs
      df_in$cost_vcmax[i] <- output$cost_vcmax
      df_in$cost_jmax[i]  <- output$cost_jmax
      df_in$cost_gs[i]    <- output$cost_transp
      
  }
  
  df_out <- 
    df_in |> 
    select(starts_with("cost"), !!var) |> 
    # pivot_longer(
    #   cols = starts_with("cost"),
    #   names_to = "cost_name",
    #   values_to = "cost_value") |> 
    pivot_longer(
      cols = !!var,
      names_to = "var",
      values_to = "val")
  
  return(df_out)               
}

## Run function
# Vcmax
df_tmp <- df_base_cc
df_tmp$vcmax <- seq(vcmax/10, vcmax*10, length.out = n_steps)

df_tmp  <- loop_carbon_costs(df_tmp, "vcmax")
df_cc   <- rbind(df_cc, df_tmp)

# Jmax
df_tmp <- df_base_cc
df_tmp$jmax <- seq(jmax/10, jmax*10, length.out = n_steps)

df_tmp  <- loop_carbon_costs(df_tmp, "jmax")
df_cc   <- rbind(df_cc, df_tmp)

# gs
df_tmp <- df_base_cc
df_tmp$gs <- seq(gs/10, gs*10, length.out = n_steps)

df_tmp  <- loop_carbon_costs(df_tmp, "gs")
df_cc   <- rbind(df_cc, df_tmp)

## Plot it
df_cc |> 
  ggplot() +
  aes(x = val*1e6, y = cost_total) +
  geom_line() +
  geom_point() +
  facet_wrap(~var, scales = "free_x") +
  labs(title = "Sensitivity of Carbon Costs",
       x = "Trait value [mu mol/m^2/s]",
       y = "Carbon Costs") +
  theme_classic()
```

```{r}
#| code-fold: true
#| label: fig-cost-function-zoom
#| fig-cap: "Sensitivity of the carbon costs defined in @eq-rcc to changes in $V_{cmax}$, $J_{cmax}$, and $g_{s}$. Same plot as @fig-cost-function but zoomed in to show minor increase in costs with increasing $J_{cmax}."

df_cc |> 
  ggplot() +
  aes(x = val*1e6, y = cost_total) +
  geom_line() +
  geom_point() +
  facet_wrap(~var, scales = "free_x") +
  labs(title = "Sensitivity of Carbon Costs (zoomed in)",
       x = "Trait value [mu mol/m^2/s]",
       y = "Carbon Costs") +
  theme_classic() + 
  ylim(750, 900)
```

### Energy Balance

The relevant functions are:

::: {.callout-note collapse="true"}
## calculate_leaf_energy_balance()

```{r, echo=FALSE}
writeLines(readLines(here::here("R/calculate_leaf_energy_balance.R")))
```
:::

::: {.callout-note collapse="true"}
## optimize_leaf_energy_balance()

```{r, echo=FALSE}
writeLines(readLines(here::here("R/optimize_leaf_energy_balance.R")))
```
:::

Below is a demonstration of the energy balance functions and a sensitivity analysis.
The difference between input leaf temperature and energy-balance-closure leaf temperature is:

```{r}
#| code-fold: false
calculate_leaf_energy_balance(  
  tc_leaf       = tc_leaf, 
  tc_air        = tc_air,
  gs            = gs,
  ppfd          = ppfd, 
  vpd_air       = vpd_air, 
  patm          = patm,
  return_what   = c("balance")
)
```

The energy balance variables under the given conditions are: 

```{r}
#| code-fold: false
#| tbl-cap: "Energy balance output at given difference between input and energy-balance-closure leaf temperature."
calculate_leaf_energy_balance(  
  tc_leaf       = tc_leaf, 
  tc_air        = tc_air,
  gs            = gs,
  ppfd          = ppfd, 
  vpd_air       = vpd_air, 
  patm          = patm,
  return_what   = c("fluxes")
) |> knitr::kable()
```

After minimizing the difference between input and energy-balance-closure leaf temperature, the final predicted leaf temperature is: 

```{r}
#| code-fold: false

optimize_leaf_energy_balance(
 tc_air  = tc_air,
 vpd_air = vpd_air,
 gs      = gs,
 ppfd    = ppfd,
 patm    = patm,
)
```

#### Sensitivity Analysis

##### Abiotic drivers

As shown in @fig-tleaf-abiotic and @fig-dtleaf-abiotic. The main abiotic drivers of the modeled leaf temperature are variables that directly drive the leave's energy input: light and air temperature. The air temperature is the main driver of leaf temperature. Interestingly, the energy balance model simulates a strong decoupling of leaf and air temperatures. At low air temperatures, the leaf is warmer than the air. And at high air temperatures, the leaf is cooler. This is likely driven by the co-occurring temperature-driven change in vapor pressure deficit that increases evaporative cooling.

The incoming light is the main source of short-wave energy input, and is therefore also a strong driver of leaf temperature. At low light levels, leaves are modeled to be cooler than air. At high light values, however, the leaf becomes substantially warmer than the air.

At higher wind speeds, the boundary conductance layer becomes thinner (i.e., the boundary layer conductance increases). This drives an equilibration of leaf and air temperatures, so that there is less decoupling at high wind speeds.

```{r}
#| code-fold: true

# Define function first --------------------------------------------------------
run_fun <- function(df, var) {
  
  for (i in 1:nrow(df)) {
    
    # print(i)
    
    df$tc_leaf[i] <- 
      optimize_leaf_energy_balance(
        tc_air  = df$tc_air[i],
        vpd_air = df$vpd_air[i],
        gs      = df$gs[i],
        ppfd    = df$ppfd[i],
        patm    = df$patm[i],
        wind    = df$wind[i],
        leaf_size = df$leaf_size[i],
        stomata_ratio = df$stomata_ratio[i],
        leaf_abs = df$leaf_abs[i]
        )
    
      df$tc_diff[i] = df$tc_leaf[i] - df$tc_air[i]
  }
  
  df_out <- df |> 
    select(c(!!var, "tc_leaf", "tc_diff")) |> 
    pivot_longer(cols = !!var)
  
  return(df_out)
}

# Create empty df for plotting  ------------------------------------------------
df_abio <- tibble()
df_bio  <- tibble()

# Create base df for sensitivity analysis  -------------------------------------
n_steps <- 20
df_base <- tibble(.rows = n_steps)
df_base$tc_air    <- rep(tc_air  , n_steps)
df_base$vpd_air   <- rep(vpd_air , n_steps)
df_base$gs        <- rep(gs      , n_steps)
df_base$co2       <- rep(co2     , n_steps)
df_base$ppfd      <- rep(ppfd    , n_steps)
df_base$patm      <- rep(patm    , n_steps)
df_base$wind      <- rep(wind    , n_steps)
df_base$leaf_size <- rep(leaf_size, n_steps)
df_base$leaf_abs  <- rep(leaf_abs, n_steps)
df_base$tc_leaf   <- rep(NA, n_steps)
df_base$tc_diff   <- rep(NA, n_steps)
df_base$stomata_ratio   <- rep(1, stomata_ratio)
df_base$kphio     <- rep(kphio, stomata_ratio)

# Run function across all variables  -------------------------------------------

### ABIOTIC VARIABLES 
## Air temperature and VPD
df_tmp <- df_base
df_tmp$tc_air  <- seq(1, 50, length.out = n_steps)

# Account for changes in vpd when temperature changes:
df_tmp$vpd_air <- 
  air_vpd_to_leaf_vpd(
    vpd_air = vpd_air,
    tc_air = tc_air,
    tc_leaf = df_tmp$tc_air)

# Removing negative vpd values
# df_tmp <- mutate(df_tmp, vpd_air = ifelse(vpd_air < 0, 10, vpd_air))

df_tmp <- run_fun(df_tmp, "tc_air")
df_abio <- rbind(df_abio, df_tmp)

# VPD
df_tmp <- df_base
df_tmp$vpd_air  <- seq(vpd_air/2, vpd_air*2, length.out = n_steps)

df_tmp <- run_fun(df_tmp, "vpd_air")
df_abio <- rbind(df_abio, df_tmp)

# PPFD
df_tmp <- df_base
df_tmp$ppfd  <- seq(ppfd/10, ppfd*10, length.out = n_steps)

df_tmp <- run_fun(df_tmp, "ppfd")
df_abio <- rbind(df_abio, df_tmp)

# Atmospheric pressure
df_tmp <- df_base
df_tmp$patm  <- seq(patm/10, patm*10, length.out = n_steps)

df_tmp <- run_fun(df_tmp, "patm")
df_abio <- rbind(df_abio, df_tmp)

# Wind
df_tmp <- df_base
df_tmp$wind  <- seq(wind/10, wind*10, length.out = n_steps)

df_tmp <- run_fun(df_tmp, "wind")
df_abio <- rbind(df_abio, df_tmp)

### BIOTIC VARIABLES
# Stomatal Conductance
df_tmp <- df_base
df_tmp$gs  <- seq(gs/10, gs*10, length.out = n_steps)

df_tmp <- run_fun(df_tmp, "gs")
df_bio <- rbind(df_bio, df_tmp)

# Leaf Size
df_tmp <- df_base
df_tmp$leaf_size  <- seq(leaf_size/10, leaf_size*10, length.out = n_steps)

df_tmp <- run_fun(df_tmp, "leaf_size")
df_bio <- rbind(df_bio, df_tmp)

# Leaf absorptance
df_tmp <- df_base
df_tmp$leaf_abs  <- seq(leaf_abs/10, leaf_abs*10, length.out = n_steps)

df_tmp <- run_fun(df_tmp, "leaf_abs")
df_bio <- rbind(df_bio, df_tmp)

# Stomatal Ratio
df_tmp <- df_base |> slice(1:2)
df_tmp$stomata_ratio  <- c(1, 2)

df_tmp <- run_fun(df_tmp, "stomata_ratio")
df_bio <- rbind(df_bio, df_tmp)

df_abio$name <- as.factor(df_abio$name)
df_bio$name <- as.factor(df_bio$name)
```

```{r}
#| code-fold: true
#| label: fig-tleaf-abiotic
#| fig-cap: "Sensitivity of modeled leaf temperature to abiotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions. For the sensitivity to air temperature, however, the temperature-driven change in vapor pressure deficit is additionally accounted for. The energy model breaks if too low temperatures and high vapor pressure deficits at low air temperatures are entered."

df_abio |> 
  ggplot() +
  aes(x = value,
      y = tc_leaf) +
  geom_line() +
  geom_point() +
  facet_wrap(~name, 
             scales = "free_x") +
  ylim(0, 50) + 
  labs(title = "Sensitivity of tc_leaf to abiotic drivers.",
       y = "T_leaf [ºC]",
       x = "Variable value") +
  theme_classic()
```

```{r}
#| code-fold: true
#| label: fig-dtleaf-abiotic
#| fig-cap: "Sensitivity of the difference between modeled leaf temperature and air temperature to abiotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions."

df_abio |> 
  ggplot() +
  aes(x = value,
      y = tc_diff) +
  geom_hline(yintercept = 0, lty = "dotted") +
  geom_line() +
  geom_point() +
  facet_wrap(~name, 
             scales = "free_x") +
  ylim(-7.5, 7.5) +
  labs(title = "Sensitivity of delta T to abiotic drivers",
       subtitle = "Below dotted line means the leaf is cooler",
       y = "T_leaf - T_air [ºC]",
       x = "Variable value") +
  theme_classic()
```

##### Biotic drivers

Again, the main drivers of leaf temperature are variables that directly influence the amount of energy taken up or released by the leaf: stomatal conductance and leaf absorptance (see @fig-tleaf-biotic and @fig-dtleaf-biotic). The larger the stomatal conductance, the more transpirative cooling occurs, the stronger the leaf is cooled. However, this increase has a saturating effect and the same increase in stomatal conductance does not always lead to the same decrease in leaf temperature. The leaf absorptance controls how much of the incoming short-wave radiation is absorbed by the leaf and therefore scales leaf temperatures linearly. Smaller leaves have smaller boundary layers and their temperature are thus more quickly equilibrated with air temperatures. Interestingly, given the standard conditions here, a larger leaf leads to constantly cooler leaves.

::: callout-warning
In general, the model analysis shows that leaves can cool significantly below air temperatures. However, this could be an artifact of picking a relatively high stomatal conductance that drives this cooling. Real-world situations may have substantially lower values for stomatal conductance leading to less cooling.
:::

```{r}
#| code-fold: true
#| label: fig-tleaf-biotic
#| fig-cap: "Sensitivity of modeled leaf temperature to biotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions."

df_bio |> 
  ggplot() +
  aes(x = value,
      y = tc_leaf) +
  geom_line() +
  geom_point() +
  facet_wrap(~name, 
             scales = "free_x") +
  ylim(0, 50) + 
  labs(title = "Sensitivity of tc_leaf to biotic drivers.",
       y = "T_leaf [ºC]",
       x = "Variable value") +
  theme_classic()
```

```{r}
#| code-fold: true
#| label: fig-dtleaf-biotic
#| fig-cap: "Sensitivity of the difference between modeled leaf temperature and air temperature to biotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions."

df_bio |> 
  ggplot() +
  aes(x = value,
      y = tc_diff) +
  geom_hline(yintercept = 0, lty = "dotted") +
  geom_line() +
  geom_point() +
  facet_wrap(~name, 
             scales = "free_x") +
  ylim(-7.5, 7.5) +
  labs(title = "Sensitivity of delta T to biotic drivers",
       subtitle = "Below dotted line means the leaf is cooler",
       y = "T_leaf - T_air [ºC]",
       x = "Variable value") +
  theme_classic()
```

### Coupled Model

Below is a demonstration for the predictions of the numerical P-Model with and without the energy balance coupled. By comparing @tbl-pmodel-wo-eb and @tbl-pmodel-wi-eb below, we see that under standard conditions, the coupled model tends to predict a lower $V_{cmax}$ and $T_{leaf}$; a higher $g_{s}$ and $\chi$; and a similar $J_{max}$.

@fig-traits-tcair-eb shows how this difference of predicted traits plays out along a gradient of air temperatures. First of all, it is clearly visible that there are numerical instabilities occurring at low air temperatures. As explained above and re-emphasized in the box below, this is likely due to the delicate sensitivity of the energy balance model to the given input of vapor pressure deficit and air temperature. 

Nonetheless, two important dynamics can be identified: First, attaching the energy balance frees stomatal conductance to regulate leaf temperatures. At low temperatures, the model predicts that it is beneficial to have increase leaf temperatures to reduce carbon costs. However, it is important to note that this could also be a consequence of the forcing to the energy balance itself (see @fig-dtleaf-abiotic and box below). Vice versa, there is a tendency to increase stomatal conductance at high air temperatures to cool leaves and thereby minimize the carbon costs. 

These higher leaf temperatures translate to the second dynamic to highlight: We see a reduction in predicted $V_{cmax}$ at these high temperatures, as it is predicted by the Least-Cost Hypothesis: At higher temperatures, costs can be reduced by reducing investments into $V_{cmax}$ whilst still benefiting from increasing assimilation due to faster enzyme kinetics. In theory, this should also apply to $J_{max}$. However, due to its minor influence on the overall costs - as described above - there is no clear change in its prediction when coupling the energy balance model.

::: callout-warning
## An important note on the results shown below.

Note that the assumed vapor pressure deficit, how it changes with air temperature, and how it plays into stomatal conductance is **highly influential** on the numerical stability of the entire routine. We are not using any real-world data here, which causes the temperature-driven vapor pressure deficit calculation to likely have unrealistically low (or strongly negative) values. As a consequence, the effect of having warmer leaf-than-air temperatures may be a forcing artifact!
:::

##### Standard Conditions

```{r}
#| code-fold: true
#| label: tbl-pmodel-wo-eb
#| column: page
#| tbl-cap: "Output of numerical P-Model without coupled energy balance model, under standard conditions."

# Numerical P-Model
optimize_traits_and_costs(
  tc_air = tc_air,
  vpd_air = vpd_air,
  patm = patm,
  co2 = co2,
  ppfd = ppfd,
  kphio = kphio,
  include_energy_balance = FALSE
) |>
  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6, a_gross = a_gross * 1e6) |> 
  relocate(vcmax, jmax, gs, chi, ci, a_gross) |> knitr::kable()
```

```{r}
#| code-fold: true
#| label: tbl-pmodel-wi-eb
#| column: page
#| tbl-cap: "Output of numerical P-Model with coupled energy balance model, under standard conditions."

# Coupled Numerical P-Model
# To call the coupled model, simply set `include_energy_balance == TRUE`

optimize_traits_and_costs(
  tc_air = tc_air,
  vpd_air = vpd_air,
  patm = patm,
  co2 = co2,
  ppfd = ppfd,
  kphio = kphio,
  include_energy_balance = TRUE
) |>
  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6, a_gross = a_gross * 1e6) |> 
  relocate(vcmax, jmax, gs, chi, ci, a_gross) |> knitr::kable()
```

##### Sensitivity Analysis

```{r}
#| code-fold: true

## Air temperature and VPD
df_tmp <- df_base
df_tmp$tc_air  <- seq(1, 50, length.out = n_steps)
df_tmp$data    <- NA

# Account for changes in vpd when temperature changes:
df_tmp$vpd_air <- 
  air_vpd_to_leaf_vpd(
    vpd_air = vpd_air,
    tc_air = tc_air,
    tc_leaf = df_tmp$tc_air)

# Removing negative vpd values
# df_tmp <- mutate(df_tmp, vpd_air = ifelse(vpd_air < 0, 0, vpd_air))

# With and Without EB
df_with_eb <- df_tmp
df_wout_eb <- df_tmp

# Run loop
for (i in 1:nrow(df_tmp)) {
  
  # cat("\n Working on", i, "/", nrow(df_tmp))
  
  df_with_eb$data[i] <- 
    optimize_traits_and_costs(
      tc_air  = df_with_eb$tc_air[i],
      vpd_air = df_with_eb$vpd_air[i],
      ppfd    = df_with_eb$ppfd[i],
      patm    = df_with_eb$patm[i],
      co2     = df_with_eb$co2[i],
      kphio   = df_with_eb$kphio[i],
      include_energy_balance = TRUE
      ) |> list()
  
  df_wout_eb$data[i] <- 
    optimize_traits_and_costs(
      tc_air  = df_wout_eb$tc_air[i],
      vpd_air = df_wout_eb$vpd_air[i],
      ppfd    = df_wout_eb$ppfd[i],
      patm    = df_wout_eb$patm[i],
      co2     = df_wout_eb$co2[i],
      kphio   = df_wout_eb$kphio[i],
      include_energy_balance = FALSE
      ) |> list()
}

# Finish up dataframes

vars_tc <- c("tc_air", "tc_leaf", "tc_diff")
vars_pm <- c("vcmax", "jmax", "gs", "chi")

df_with_eb <- 
  df_with_eb |> 
  select(data) |> 
  unnest(data) |>
  select(any_of(c(vars_tc, vars_pm))) |> 
  mutate(tc_diff = tc_leaf - tc_air) |> 
  pivot_longer(cols = !any_of(vars_tc)) |> 
  mutate(name = as.factor(name))

df_wout_eb <- 
  df_wout_eb |> 
  select(data) |> 
  unnest(data) |>
  select(any_of(c(vars_tc, vars_pm))) |> 
  mutate(tc_diff = tc_leaf - tc_air) |> 
  pivot_longer(cols = !any_of(vars_tc)) |> 
  mutate(name = as.factor(name))

df_fin <- 
  rbind(
    df_wout_eb |> mutate(energy_balance = FALSE),
    df_with_eb |> mutate(energy_balance = TRUE)
    )
```

```{r}
#| code-fold: true
#| label: fig-traits-tcair-eb
#| fig-cap: "Sensitivity of predicted optimal traits to whether the energy balance model is coupled or not."
df_fin |> 
  ggplot() +
  aes(y = value,
      x = tc_air,
      color = energy_balance) +
  geom_line() +
  geom_point() +
  facet_wrap(~name, 
             scales = "free_y") +
  labs(title = "Sensitivity of traits to tc_air",
       x = "T_air [ºC]",
       y = "Trait Value") +
  theme_classic()
```

```{r}
#| code-fold: true
#| label: fig-dt-tcair-eb
#| fig-cap: "Sensitivity of the leaf-to-air temperature difference to changes in air temperatures for the coupled and non-coupled models. Note that the non-coupled model does not model any leaf temperature and simply assumed air and leaf temperatures are the same."

df_fin |> 
  select(tc_air, tc_diff, energy_balance) |> 
  distinct() |> 
  ggplot() +
  aes(y = tc_diff,
      x = tc_air,
      color = energy_balance) +
  geom_hline(yintercept = 0, lty = "dotted") +
  geom_line() +
  geom_point() +
  labs(title = "Sensitivity of air-to-leaf temperature difference to tc_air",
       subtitle = "Below the dotted line means the leaf is cooler than air",
       x = "T_air [ºC]",
       y = "T_leaf - T_air [ºC]") +
  ylim(-8, 8) +
  theme_classic() 
```

#### Cost Function Sensitivity

@fig-cost-function-eb shows that coupling the energy balance does not alter the existence of distinct minima. As in @fig-cost-function, there are distinct minima for $V_{cmax}$ and $g_{s}$. $J_{max}$ also has a minima but due to its little influence on the carbon costs, the optimization algorithm cannot find that minima and tends to predict too high values for $J_{max}$.

```{r}
#| code-fold: true
#| label: fig-cost-function-eb
#| fig-cap: "Sensitivity of the carbon costs defined in @eq-rcc to changes in $V_{cmax}$, $J_{cmax}$, and $g_{s}$ when energy balance is coupled."

# Get reference dataframe
n_steps <- 50
df_base_cc <- tibble(.rows = n_steps)

df_base_cc$vcmax      <- rep(vcmax, n_steps)
df_base_cc$jmax       <- rep(jmax, n_steps)
df_base_cc$gs         <- rep(gs, n_steps)
df_base_cc$cost_total <- rep(NA, n_steps)
df_base_cc$cost_vcmax <- rep(NA, n_steps)
df_base_cc$cost_jmax  <- rep(NA, n_steps)
df_base_cc$cost_gs    <- rep(NA, n_steps)

df_cc <- tibble()

# Calculate carbon costs
loop_carbon_costs <- function(df_in, var) {
  
  for (i in 1:nrow(df_in)) {
    
    output <- 
      calculate_traits_and_costs(
        par = c(df_in$vcmax[i],
                df_in$jmax[i],
                df_in$gs[i]),
        tc_air = tc_air,
        vpd_air = vpd_air,
        ppfd = ppfd,
        co2 = co2,
        patm = patm,
        kphio = kphio,
        include_energy_balance = TRUE,
        return_all = TRUE,
        units_out_per_second = TRUE
      )
      
      df_in$cost_total[i] <- output$carbon_costs
      df_in$cost_vcmax[i] <- output$cost_vcmax
      df_in$cost_jmax[i]  <- output$cost_jmax
      df_in$cost_gs[i]    <- output$cost_transp
      
  }
  
  df_out <- 
    df_in |> 
    select(starts_with("cost"), !!var) |> 
    # pivot_longer(
    #   cols = starts_with("cost"),
    #   names_to = "cost_name",
    #   values_to = "cost_value") |> 
    pivot_longer(
      cols = !!var,
      names_to = "var",
      values_to = "val")
  
  return(df_out)               
}

## Run function
# Vcmax
df_tmp <- df_base_cc
df_tmp$vcmax <- seq(vcmax/10, vcmax*10, length.out = n_steps)

df_tmp  <- loop_carbon_costs(df_tmp, "vcmax")
df_cc   <- rbind(df_cc, df_tmp)

# Jmax
df_tmp <- df_base_cc
df_tmp$jmax <- seq(jmax/10, jmax*10, length.out = n_steps)

df_tmp  <- loop_carbon_costs(df_tmp, "jmax")
df_cc   <- rbind(df_cc, df_tmp)

# gs
df_tmp <- df_base_cc
df_tmp$gs <- seq(gs/10, gs*10, length.out = n_steps)

df_tmp  <- loop_carbon_costs(df_tmp, "gs")
df_cc   <- rbind(df_cc, df_tmp)

## Plot it
df_cc |> 
  ggplot() +
  aes(x = val*1e6, y = cost_total) +
  geom_line() +
  geom_point() +
  facet_wrap(~var, scales = "free_x") +
  labs(title = "Sensitivity of Carbon Costs (with energy balance)",
       x = "Trait value [mu mol/m^2/s]",
       y = "Relative Carbon Costs") +
  theme_classic()
```

```{r}
#| code-fold: true
#| label: fig-cost-function-eb-zoomed
#| fig-cap: "Sensitivity of the carbon costs defined in @eq-rcc to changes in $V_{cmax}$, $J_{cmax}$, and $g_{s}$ when energy balance is coupled. Same plot as @fig-cost-function-eb but zoomed in to show minor increase in costs with increasing $J_{cmax}$."

df_cc |> 
  ggplot() +
  aes(x = val*1e6, y = cost_total) +
  geom_line() +
  geom_point() +
  facet_wrap(~var, scales = "free_x") +
  labs(title = "Sensitivity of Carbon Costs (with energy balance)",
       x = "Trait value [mu mol/m^2/s]",
       y = "Relative Carbon Costs") +
  theme_classic() +
  ylim(750, 900)
```
