[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Leaf Energy Balance Tutorial",
    "section": "",
    "text": "About\nThe field of thermoregulation is fundamental to photosynthesis but the lack of understanding and process-based modelling of leaf temperature regulation creates a knowledge gap worthy of investigation. Moreover, by exploiting EEO principles, we can create a model that accounts for the interplay of thermal acclimation and thermoregulation. Understanding this interplay is an unresolved but highly relevant question because it gives insights into the processes a plant may use to cope with a rising temperatures (Cavaleri, 2020).\nThis tutorial provides the scientific basis and code implementation to model a leaf’s temperature based on thermodynamic theory and eco-evolutionary optimality theory. Chapter 1 gives insight into the current debate on leaf thermoregulation and makes the statement how eco-evolutionary optimality theory may provide a solution to this issue. In Chapter 3, a numerical algorithm is presented alongside a sensitivity analysis showing the strengths and weaknesses of the current implemenation. In Chapter 4, further improvements of the algorithm and ideas for potential test-cases to evaluate the model are provided.\n\n\nRequirements\n\nsource(here::here(\"R/_setup.R\"))\n\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] conflicted_1.2.0 quarto_1.2       rpmodel_1.2.0    patchwork_1.1.3 \n [5] lubridate_1.9.2  forcats_1.0.0    stringr_1.5.0    dplyr_1.1.2     \n [9] purrr_1.0.2      readr_2.1.4      tidyr_1.3.0      tibble_3.2.1    \n[13] ggplot2_3.4.3    tidyverse_2.0.0  here_1.0.1      \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3        generics_0.1.3    renv_0.17.3       stringi_1.7.12   \n [5] hms_1.1.3         digest_0.6.33     magrittr_2.0.3    evaluate_0.21    \n [9] grid_4.3.1        timechange_0.2.0  fastmap_1.1.1     rprojroot_2.0.3  \n[13] jsonlite_1.8.7    processx_3.8.2    ps_1.7.5          fansi_1.0.4      \n[17] scales_1.2.1      cli_3.6.1         rlang_1.1.1       munsell_0.5.0    \n[21] cachem_1.0.8      withr_2.5.0       yaml_2.3.7        tools_4.3.1      \n[25] tzdb_0.4.0        memoise_2.0.1     colorspace_2.1-0  vctrs_0.6.3      \n[29] R6_2.5.1          lifecycle_1.0.3   pkgconfig_2.0.3   pillar_1.9.0     \n[33] later_1.3.1       gtable_0.3.3      glue_1.6.2        Rcpp_1.0.11      \n[37] xfun_0.40         tidyselect_1.2.0  rstudioapi_0.15.0 knitr_1.43       \n[41] htmltools_0.5.6   rmarkdown_2.24    compiler_4.3.1   \n\n\n\n\n\n\nCavaleri, M. A. (2020). Cold-blooded forests in a warming world. New Phytologist, 228(5), 1455–1457. https://doi.org/10.1111/nph.16916"
  },
  {
    "objectID": "01-motivation.html#why-care-about-leaf-temperatures",
    "href": "01-motivation.html#why-care-about-leaf-temperatures",
    "title": "1  Motivation",
    "section": "1.1 Why Care About Leaf Temperatures?",
    "text": "1.1 Why Care About Leaf Temperatures?\nIn the realm of modern ecological research, a rather unassuming aspect has gained substantial attention: the temperature of leaves. This seemingly trivial factor, however, plays a crucial role in understanding the dynamics of ecosystems and the biophysical processes that drive them. Moreover, the beauty of leaf temperature modelling lies in its practicality and real-world implications. For example in agriculture, knowing a crop’s leaf temperature and how it vaires under upcoming weather may allow a farmer to take protective actions like shading or increased irrigation to protect that crop from heat stress.\nOr consider the field of Earth system modeling, where many models often use air temperatures to calculate photosynthetic processes for the lack of a comprehensive leaf temperature model. However, as described below, it remains unclear to what extent leaf temperatures depart from air temperatures and why. Even a departure of a few ºC may propagate through an entire model and cause flawed prediction of photosynthesis. Considering that climate change impacts are driven by the change in global surface temperature, ignoring leaf temperature hampers the reliability of impact predictions."
  },
  {
    "objectID": "01-motivation.html#the-debate-on-leaf-thermoregulation",
    "href": "01-motivation.html#the-debate-on-leaf-thermoregulation",
    "title": "1  Motivation",
    "section": "1.2 The Debate on Leaf Thermoregulation",
    "text": "1.2 The Debate on Leaf Thermoregulation\nEven though leaf thermoregulation, that is the mechanism by which leaves may change their temperature, has been researched for decades (Mahan & Upchurch, 1988), there has been a substantial debate growing in recent years (see timeline below). Essentially, the debate centers around the question: “Can plants actively regulate their leaf temperature and if so, when and how?”.\nCavaleri (2020) visualized this debate neatly, shown here in Figure 1.1. The Figure depicts different potential leaf thermoregulation strategies that plants may follow. These strategies can be identified by slope of regressing leaf temperature against air temperature:\n\nMegathermy describes the case when a leaf warms faster than its surrounding air warms (slope &gt; 1).\nPoikilothermy describes the case when a leaf’s temperature changes one-to-one with air temperature (slope = 1). Note that “poikilothermy with offset” describes the case of poikilothermy but consistently higher leaf than air temperatures.\nLimited Homeothermy describes the case when a leaf warms less quickly than its surrounding air (slope &lt; 1).\nHomeostasis describes the case when a leaf’s temperature does not change irrespective of changes in temperature.\n\n\n\n\n\n\nFigure 1.1: Figure re-drawn from Cavaleri 2020. The Figure visualizes different leaf thermoregulation strategies, indicated by the line’s slope (see main text for definitions).\n\n\n\n\nFrom a physical point of view, a leaf’s temperature arises from the amount of energy it receives through short- and long-wave irradiation, and the amount of energy it loses through latent heat, sensible heat, and long-wave radiation (more on this in Chapter 2. Since a leaves do not produce significant heat through biophysical processes, they can primarily modify their leaf temperature through two path ways. Either, they try to avoid incoming energy from sunlight by adjusting their leaf angle. Or, they increase their energy loss via latent heat by opening their stomata to increase transpiration.\nThis latter mechanism has become a scientific debate, since it supports the “limited homeothermy” hypothesis meaning that plants actively cool as their surrounding air warms up to avoid heat stress or even damage Mahan & Upchurch (1988). However, this hypothesis has been questioned and the hypothesis of “poikilothermy” has gained traction (see below). Here’s a short (not extensive) overview of the most recent publications and their main findings on this topic:\nPro “limited homeothermy”:\n\nBlonder & Michaletz (2018) gathered a large leaf-level temperature dataset across north america and highlighted that thermoregulation varies a lot across different microclimates. They show that the slope of leaf against air temperature is predictable, especially considering the cooling effect of opening stomata to avoid lethal heat stress.\nDong et al. (2017) found that monitoring the diurnal cycle of leaf temperature shows exceeding leaf temperature only during midday. But from sunset to sunrise, leaves they can cool themselves below air temperature by increasing transpiration.\n\nContra “limited homeothermy”:\n\nGuo et al. (2023) paired FLUXNET data with MODIS land surface data and found that for the extratropics most ecosystems tend to exhibit poikilothermy with offset and that the difference between leaf and air temperature is primarily driven by abiotic factors. Also see comment by Drake (2023) for broader context.\nStill et al. (2022) analyzed thermal imaging data across US forests and that canopy leaves tend to be warmer than their surrounding air. They highlighted the diurnal pattern whereby leaf temperature exceeds air temperature mostly during midday.\nDrake et al. (2020) compared leaf-level temperature measurements against re-constructed leaf temperatures from isotopic signatures and found that both methods indicate no thermoregulation in eucalyptus, even under warming treatments.\n\nRelated but without stance:\n\nDoughty et al. (2023) analysed tropical canopy temperature by pairing data from remote-sensing, from in-situ thermocouples, and from warming experiments. They found that 0.01% of leaves exceed the critical threshold temperature above which lethal damage occurs (~46.7ºC). Experimental warming increased this percentage in non-linear manner. Using an empirical model, they estimated that tropical forests can withstand a warming of ~4ºC before potentially reaching a metabolic tipping point.\nVinod et al. (2023) review paper on mechanisms and drivers of thermal sensitivity gradients within forest canopies.\nStill et al. (2021) discusses methods to combine multi-scale data to understand leaf thermoregulation.\nCavaleri (2020) summarized the ongoing debate and highlighted that thermoregulation is not an isolated process but that one needs to account for species variation, canopy structure (“umbrella effect”), and thermal acclimation.\n\nFrom this inconclusive literature, it is clear that the debate about leaf thermoregulation is not settled. What is more, more and more data from different methods (hand-held device measurements, thermocouples, near and remote thermal imaging, isotopic signature, etc.) deliver different insights at different scales (leaf, canopy, ecosystem). It is thus no wonder that there are papers like “The 90 ways to describe plant temperature” by Körner & Hiltbrunner (2018)."
  },
  {
    "objectID": "01-motivation.html#the-use-of-eco-evolutionary-optimality-theory",
    "href": "01-motivation.html#the-use-of-eco-evolutionary-optimality-theory",
    "title": "1  Motivation",
    "section": "1.3 The Use of Eco-Evolutionary Optimality Theory",
    "text": "1.3 The Use of Eco-Evolutionary Optimality Theory\nThe idea of eco-evolutionary optimality theory (EEO) was well described by Harrison et al. (2021):\n\nEEO invokes the power of natural selection to eliminate uncompetitive trait combinations, and thereby shape predictable, general patterns in vegetation structure and composition. The term ‘eco-evolutionary’ expresses the fact that organisms adjust to their environment on both shorter (eco-physiological, days to months) timescales and longer (demographic and evolutionary) timescales.\n\nThe key take-away from this definition is the hypothesis that we can describe the composition of an ecosystem and its traits as a consequence of the climatic environment (Franklin et al., 2020). By coming up with EEO-based constraints for how an ecosystem must have evolved under a given climate, we can predict key photosynthetic processes using nothing else but information on the environment. Compared to the common approach to describe these processes with empirical fixed parametrization, EEO-principles allow more flexible predictions and gradual development of ecosystems under global change into account. Therefore, these principles offer a great opportunity to create more reliable, robust, and realistic Earth system models (Prentice et al., 2015).\nDue to being a fundamental driver of photosynthesis, its complexity in assessing, and the ongoing scientific debate, the field of leaf thermoregulation is definitely worth taking a deep dive! Moreover, by exploiting EEO principles, we can create model that accounts for the interplay of thermal acclimation and thermoregulation. Understanding this interplay is an unresolved but highly relevant question because it gives insights into the processes a plant may use to cope with a rising temperatures (Cavaleri, 2020).\n\n\n\n\nBlonder, B., & Michaletz, S. T. (2018). A model for leaf temperature decoupling from air temperature. Agricultural and Forest Meteorology, 262, 354–360. https://doi.org/10.1016/j.agrformet.2018.07.012\n\n\nCavaleri, M. A. (2020). Cold-blooded forests in a warming world. New Phytologist, 228(5), 1455–1457. https://doi.org/10.1111/nph.16916\n\n\nDong, N., Prentice, I. C., Harrison, S. P., Song, Q. H., Zhang, Y. P., & Sykes, M. (2017). Biophysical homoeostasis of leaf temperature: A neglected process for vegetation and land-surface modelling. Global Ecology and Biogeography, 26(9), 998–1007. https://doi.org/10.1111/geb.12614\n\n\nDoughty, C. E., Keany, J. M., Wiebe, B. C., Rey-Sanchez, C., Carter, K. R., Middleby, K. B., Cheesman, A. W., Goulden, M. L., Rocha, H. R. da, Miller, S. D., Malhi, Y., Fauset, S., Gloor, E., Slot, M., Oliveras Menor, I., Crous, K. Y., Goldsmith, G. R., & Fisher, J. B. (2023). Tropical forests are approaching critical temperature thresholds. Nature, 1–7. https://doi.org/10.1038/s41586-023-06391-z\n\n\nDrake, J. E. (2023). A data-intensive documentation of plant ecosystem thermoregulation across spatial and temporal scales. New Phytologist, 238(3), 921–923. https://doi.org/10.1111/nph.18819\n\n\nDrake, J. E., Harwood, R., Vårhammar, A., Barbour, M. M., Reich, P. B., Barton, C. V. M., & Tjoelker, M. G. (2020). No evidence of homeostatic regulation of leaf temperature in Eucalyptus parramattensis trees: integration of CO2 flux and oxygen isotope methodologies. New Phytologist, 228(5), 1511–1523. https://doi.org/10.1111/nph.16733\n\n\nFranklin, O., Harrison, S. P., Dewar, R., Farrior, C. E., Brännström, Å., Dieckmann, U., Pietsch, S., Falster, D., Cramer, W., Loreau, M., Wang, H., Mäkelä, A., Rebel, K. T., Meron, E., Schymanski, S. J., Rovenskaya, E., Stocker, B. D., Zaehle, S., Manzoni, S., … Prentice, I. C. (2020). Organizing principles for vegetation dynamics. Nature Plants, 6(5), 444453. https://doi.org/ghmz7g\n\n\nGuo, Z., Still, C. J., Lee, C. K. F., Ryu, Y., Blonder, B., Wang, J., Bonebrake, T. C., Hughes, A., Li, Y., Yeung, H. C. H., Zhang, K., Law, Y. K., Lin, Z., & Wu, J. (2023). Does plant ecosystem thermoregulation occur? An extratropical assessment at different spatial and temporal scales. New Phytologist, 238(3), 1004–1018. https://doi.org/10.1111/nph.18632\n\n\nHarrison, S. P., Cramer, W., Franklin, O., Prentice, I. C., Wang, H., Brännström, Å., Boer, H., Dieckmann, U., Joshi, J., Keenan, T. F., Lavergne, A., Manzoni, S., Mengoli, G., Morfopoulos, C., Peñuelas, J., Pietsch, S., Rebel, K. T., Ryu, Y., Smith, N. G., … Wright, I. J. (2021). Eco-evolutionary optimality as a means to improve vegetation and land-surface models. New Phytologist, 231(6), 2125–2141. https://doi.org/10.1111/nph.17558\n\n\nKörner, C., & Hiltbrunner, E. (2018). The 90 ways to describe plant temperature. Perspectives in Plant Ecology, Evolution and Systematics, 30, 16–21. https://doi.org/10.1016/j.ppees.2017.04.004\n\n\nMahan, J. R., & Upchurch, D. R. (1988). Maintenance of constant leaf temperature by plants. Hypothesis-limited homeothermy. Environmental and Experimental Botany, 28(4), 351–357. https://doi.org/10.1016/0098-8472(88)90059-7\n\n\nPrentice, I. C., Liang, X., Medlyn, B. E., & Wang, Y.-P. (2015). Reliable, robust and realistic: the three R’s of next-generation land-surface modelling. Atmospheric Chemistry and Physics, 15(10), 5987–6005. https://doi.org/10.5194/acp-15-5987-2015\n\n\nStill, C. J., Page, G., Rastogi, B., Griffith, D. M., Aubrecht, D. M., Kim, Y., Burns, S. P., Hanson, C. V., Kwon, H., Hawkins, L., Meinzer, F. C., Sevanto, S., Roberts, D., Goulden, M., Pau, S., Detto, M., Helliker, B., & Richardson, A. D. (2022). No evidence of canopy-scale leaf thermoregulation to cool leaves below air temperature across a range of forest ecosystems. Proceedings of the National Academy of Sciences, 119(38), e2205682119. https://doi.org/10.1073/pnas.2205682119\n\n\nStill, C. J., Rastogi, B., Page, G. F. M., Griffith, D. M., Sibley, A., Schulze, M., Hawkins, L., Pau, S., Detto, M., & Helliker, B. R. (2021). Imaging canopy temperature: shedding (thermal) light on ecosystem processes. New Phytologist, 230(5), 1746–1753. https://doi.org/10.1111/nph.17321\n\n\nVinod, N., Slot, M., McGregor, I. R., Ordway, E. M., Smith, M. N., Taylor, T. C., Sack, L., Buckley, T. N., & Anderson-Teixeira, K. J. (2023). Thermal sensitivity across forest vertical profiles: patterns, mechanisms, and ecological implications. New Phytologist, 237(1), 22–47. https://doi.org/10.1111/nph.18539"
  },
  {
    "objectID": "02-theory.html#photosynthesis",
    "href": "02-theory.html#photosynthesis",
    "title": "2  Theory",
    "section": "2.1 Photosynthesis",
    "text": "2.1 Photosynthesis\n\n2.1.1 Instantaneous Photosynthesis\nPhotosynthesis is the process by which plants use the energy from sunlight to turn CO\\(_2\\) and H\\(_2\\)O into biomass and O\\(_2\\). A commonly used photosynthesis model, the Farquhar-vonCaemmerer-Berry Model (Berry & Bjorkman, 1980) describes gross photosynthesis (\\(A_{gross}\\)) as the smaller of two reactions:\n\\[\nA_{gross} = \\text{min}(A_c,\\; A_j)\n\\tag{2.1}\\]\n\\(A_c\\) is the carboxylation-limited photosynthesis rate. Carboxylation is the reaction of CO\\(_2\\) with the enzyme key photosynthesis enzyme Rubisco. Therefore, the maximum rate of carboxylation (\\(V_{cmax}\\)) directly controls \\(A_c\\). Additionally, \\(A_c\\) is constrained depends on the amount of CO\\(_2\\) that is available in the leaf (\\(c_i\\)), and is constrained by additional enzyme-dynamics that we skip for now (given by the Michaelis-Menten Constant \\(K\\) and the photo respiration \\(\\Gamma^*\\)). \\(A_c\\) is defined as:\n\\[\nA_c = V_{cmax}\\frac{c_i - \\Gamma^*}{c_i-K}\\\n\\tag{2.2}\\]\n\\(A_j\\) is the RuBP-photosynthesis rate. RuBP is another crucial enzyme in the photosynthetic cycle and its regeneration depends on the electron transport coming from harvesting the incoming light. Thus, this photosynthesis rate is also often called “electron transport-limited rate”. \\(A_j\\) is therefore directly dependent on \\(J\\), the electron transport rate, as shown below:\n\\[\nA_j = \\frac{J}{4}\\frac{c_i-\\Gamma^*}{c_i+2\\Gamma^*}\n\\tag{2.3}\\]\nThe electron transport rate is further defined by a saturating function, whereby \\(J\\) increases with the absorbed light (\\(I_{abs\\)) up to an maximum electron transport rate \\(J_{max}\\):\n\\[\nJ=\\frac{4 \\varphi I_{abs}}{\\sqrt{1+\\left(\\dfrac{4 \\varphi I_{abs}}{J_{max}}\\right)^{2}}}\n\\tag{2.4}\\]\nHere, \\(\\varphi\\) is the quantum yield efficiency of photosynthesis and describes how many moles of carbon are bound per mole of electrons. Technically, eight electrons are necessary to bind one CO\\(_2\\), so the quantum yield efficiency is often set to 0.125 (but may vary in reality due to abiotic and biotic conditions).\nFor now, this is all we need to know about how to model the instantaneous response of photosynthesis, meaning how photosynthesis responds to immediate (think of milliseconds and faster) changes in temperature, light, and so on. Key to take away from this short primer is that a photosynthesis model requires the three variables: \\(c_i\\), \\(V_{cmax}\\), \\(J_{max}\\). We know from the literature these leaf traits are not fixed in time and that plants adjust them over time. This means that plants acclimate to their environment by changing their physiology based on the environmental condition they experience over weeks (Smith & Dukes, 2013). As described below, this knowledge helps us to predict long-term average leaf traits from which we can then derive the instantaneous response of photosynthesis.\nBefore we get to the acclimated part, we must also understand how CO\\(_2\\) actually enters a leaf. All gaseous exchange with the atmosphere goes through small openings in a leaf, called the stomata, which are actively opened and closed by the leaf itself. As stomata open CO\\(_2\\) enters and H\\(_2\\)O leaves the leaf. This is a classic diffusion, which is controlled by the diffusivity of the compound in question and the gradient in compound concentration in the leaf and in the atmosphere. Using Fick’s law, the transpiration of H\\(_2\\)O is:\n\\[\nE = g_s 1.6D\n\\tag{2.5}\\]\nHere, \\(E\\) is the transpiration of water, \\(D\\) is the vapor pressure deficit (the difference between actual and saturated water vapor pressure), \\(g_s\\) is the stomatal conductance of CO\\(_2\\) (the \\(1.6\\) are to transform the H\\(_2\\)O flux into units of CO\\(_2\\)).\n\n\n2.1.2 Acclimated Photosynthesis\n\n2.1.2.1 The Original P-Model\nTo predict the three key variables mentioned above, we use the “P-Model” (the “P” stands for “Productivity”) formulation that was originally published by Prentice et al. (2014). The P-Model makes assumption that the plants optimize their physiology towards average long-term climatic conditions. This means that over a timescale of days to weeks, plants acclimate to their environment. Making this assumption allows to predict acclimated values of \\(c_i\\), \\(V_{cmax}\\), \\(J_{max}\\) across ecosystems and species, knowing nothing else but the climatic condition of that ecosystem.\nThe Coordination Hypothesis states that a leave coordinates its physiology so that during midday conditions (high light, high temperature) neither photosynthesis rate is limiting (Maire et al., 2012):\n\\[\nA_{gross} = A_c = A_j\n\\tag{2.6}\\]\nThe Least-Cost Hypothesis applies the economic principle of resource optimization to a plant. To maintain its product (biomass, here \\(A_{gross}\\)), a plant needs to balance its carbon resource investments for building its “infrastructure” to bind CO\\(_2\\) and to maintain a matching supply of H\\(_2\\)O (Prentice et al., 2014). In other words, there must exists an optimal ratio of internal to atmospheric CO\\(_2\\) concentrations (\\(\\chi\\)), so that the marginal costs for maintaining electron transport and carboxylation are minimal:\n\\[\na \\frac{\\partial(E / A_{gross})}{\\partial \\chi}+b \\frac{\\partial\\left(V_{cmax} / A_{gross}\\right)}{\\partial \\chi} = 0\n\\tag{2.7}\\]\nHere, \\(a\\) is the marginal cost to maintain a given water transport rate, \\(b\\) is the marginal cost to maintain a given carboxylation transport rate. Accounting for the temperature dependency of water (\\(\\eta^*\\)), we can express the marginal costs as a ratio - the ratio between the marginal costs of maintaining carboxylation over maintaining water transport:\n\\[\n\\beta = b/a \\,\\eta^*\n\\tag{2.8}\\]\nFollowing the rationale of the cost minimization, the P-Model further uses the criteria that a leaf also minimizes the marginal carbon cost (\\(c\\)) for maintaining its electron transport capacity:\n\\[\n\\frac{\\partial A}{\\partial J_{\\max }}=c\n\\tag{2.9}\\]\nApplying these equations predicts \\(V_{cmax}\\), \\(g_{s}\\), and \\(J_{max}\\)jointly and how they vary with climatic conditions for absorbed sunlight (\\(I_{abs}\\)), ambient CO\\(_{2}\\) (\\(c_a\\)), vapor pressure deficit (\\(D\\)), air temperature (\\(T\\)), and atmospheric pressure (\\(P_{atm}\\)). Note that a detailed explanation and derivation of the P-Model is given in B. D. Stocker et al. (2020) and available as code in the {rpmodel} package (B. Stocker & Hufkens, 2021).\n\n\n2.1.2.2 A Numerical Approach\nThe short-coming of the analytic approach to the P-Model describe above is that it takes air temperatures to predict the acclimated traits and cannot account for any de-coupling of leaf and air temperatures. Also, since \\(g_s\\) is coupled jointly with the other traits, it cannot vary independently to potentially modify the leaf temperature so that the total carbon costs are minimized. To resolve this issue, we can create a numerical minimization problem where each leaf trait is optimized separately - and through the liberation of \\(g_s\\), we can couple an energy balance to additionally optimize a leaf’s temperature. Following the rationale of the Least-Cost Hypothesis, we use here the following optimization problem:\n\\[\n\\frac{\\beta \\;V_{cmax} + 1.6\\;D\\;g_s + c \\;J_{max} }{A_{gross}} = min.\n\\tag{2.10}\\]\nNote that we are now lacking a formulation for \\(A_{gross}\\). However, we can use Fick’s Law again and set the carbon flux equal to assimilation:\n\\[\nA_c \\text { or } A_j=g s\\left(c_a-c_i\\right)\n\\tag{2.11}\\]\nInserting \\(A_c\\) or \\(A_c\\) creates a quadratic equation that can be solved for in \\(c_i\\) with the general form:\n\\[\n0=a c_i^2+b c_i+c\n\\tag{2.12}\\]\nFor \\(A_c\\), this gives:\n\\[\nA_c=g_s\\left(c_a-c_i\\right)=V_{c \\max } \\frac{c_i-\\Gamma^*}{c_i+K}\n\\tag{2.13}\\] with the parameters:\n\\[\na=-g_s \\quad b=g_s c_a-g_s K-V_{c \\max } \\quad c=\\Gamma^* V_{c \\max }+g_s c_a K\n\\tag{2.14}\\] For \\(A_j\\), this gives: \\[\nA_j=g_s\\left(c_a-c_i\\right)=\\frac{J}{4} \\frac{c_i+\\Gamma^*}{c_i+2 \\Gamma^*}\n\\tag{2.15}\\] with the parameters: \\[\na=-g_s \\quad b=g_s c_a-2 \\Gamma^* g_s-J / 4 \\quad c=2 \\Gamma^* g_s c_a+\\Gamma^* J / 4\n\\tag{2.16}\\]"
  },
  {
    "objectID": "02-theory.html#sec-leb",
    "href": "02-theory.html#sec-leb",
    "title": "2  Theory",
    "section": "2.2 Energy Balance",
    "text": "2.2 Energy Balance\nA leaf’s temperature is controlled by its gain and loss of energy. The total incoming energy of a leaf is the sum of absorbed solar short-wave and absorbed thermal long-wave radiation. The outgoing energy consists of the long-wave thermal radiation by the leaf, the sensible heat flux (i.e., thermal convection) and the latent heat flux (i.e., energy consumed through vaporization or released from dew). Under steady-state conditions, a constant leaf temperature exists at which incoming and outgoing energy are equal.\nFor simplicity, we do not delve into the physics of the energy balance. The aspect to understand is that the calculation of the leaf temperature has a re-cursive component to it. For example, to calculate the leaf temperature, one must know the stomatal boundary layer for water. However, this boundary layer itself depends on the leaf temperature. Such recursion complicates the calculation of the leaf temperature.\nThis tutorial follows a numerical approach to calculate leaf temperatures. The energy balance model implemented here is adapted from the {plantecophys} package (Duursma, 2015). It is based on the model published by Leuning et al. (1995) and Wang & Leuning (1998), where more in-depth descriptions can be found.\n\n\n\n\nBerry, J., & Bjorkman, O. (1980). Photosynthetic Response and Adaptation to Temperature in Higher Plants. Annual Review of Plant Physiology, 31(1), 491–543. https://doi.org/10.1146/annurev.pp.31.060180.002423\n\n\nDuursma, R. A. (2015). Plantecophys - An R Package for Analysing and Modelling Leaf Gas Exchange Data. PLOS ONE, 10(11), e0143346. https://doi.org/bkmj\n\n\nLeuning, R., Kelliher, F. M., Pury, D. G. G., & Schulze, E.-D. (1995). Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies. Plant, Cell and Environment, 18(10), 1183–1200. https://doi.org/10.1111/j.1365-3040.1995.tb00628.x\n\n\nMaire, V., Martre, P., Kattge, J., Gastal, F., Esser, G., Fontaine, S., & Soussana, J.-F. (2012). The Coordination of Leaf Photosynthesis Links C and N Fluxes in C3 Plant Species. PLoS ONE, 7(6), e38345. https://doi.org/10.1371/journal.pone.0038345\n\n\nPrentice, I. C., Dong, N., Gleason, M. S., Maire, V., & Wright, J. I. (2014). Balancing the costs of carbon gain and water transport: Testing a new theoretical framework for plant functional ecology. Ecology Letters, 17(1), 82–91. https://doi.org/gf9w4m\n\n\nSmith, N. G., & Dukes, J. S. (2013). Plant respiration and photosynthesis in global-scale models: Incorporating acclimation to temperature and CO2. Global Change Biology, 19(1), 4563. https://doi.org/f4gv3p\n\n\nStocker, B. D., Wang, H., Smith, N. G., Harrison, S. P., Keenan, T. F., Sandoval, D., Davis, T., & Prentice, I. C. (2020). P-model v1.0: an optimality-based light use efficiency model for simulating ecosystem gross primary production. Geoscientific Model Development, 13(3), 1545–1581. https://doi.org/10.5194/gmd-13-1545-2020\n\n\nStocker, B., & Hufkens, K. (2021). Rpmodel v1.2.0: R package implementing the p-model. Zenodo. https://doi.org/10.5281/ZENODO.3359706\n\n\nWang, Y.-P., & Leuning, R. (1998). A two-leaf model for canopy conductance, photosynthesis and partitioning of available energy I: Agricultural and Forest Meteorology, 91(1-2), 89–111. https://doi.org/10.1016/S0168-1923(98)00061-6"
  },
  {
    "objectID": "03-algorithm.html#description",
    "href": "03-algorithm.html#description",
    "title": "3  Algorithm",
    "section": "3.1 Description",
    "text": "3.1 Description\nThe goal of this algorithm is to predict a leaf temperature at which the costs for maintaining photosynthesis are minimal. To do this, two optimization algorithms are required as displayed in Figure 3.1, the numerical P-Model algorithm and the energy balance algorithm.\nThe numerical P-Model algorithm solves the optimization problem to find the values for \\(V_{cmax}\\), \\(J_{max}\\), and \\(g_{s}\\) at which the carbon costs for maintaining photosynthesis are minimal (explained in Chapter 2):\n\\[\n\\frac{\\beta \\;V_{cmax} + 1.6\\;D\\;g_s + c \\;J_{max} }{A_{gross}} = min.\n\\tag{3.1}\\]\nThe energy balance algorithm searches for the leaf temperature that closes the energy budget described in Section 2.2. Certain terms within the energy balance depend on assuming a leaf temperature in the first place. This turns the algorithm into an optimization problem where the goal is to minimize the difference between the initially assumed leaf temperature (\\(T_{\\text{leaf, init}}\\)) and the leaf temperature that closes the energy balance (\\(T_{\\text{leaf, eb}}\\)):\n\\[\nT_{\\text{leaf, init}} - T_{\\text{leaf, eb}} = min.\n\\tag{3.2}\\]\nThe algorithm visualized in Figure 3.1 reads as follows:\n1. Pick random values for vcmax, jmax, gs\n2. Pick random value for tc_leaf (initial leaf temperature)\n3. Calculate the energy balanced given tc_leaf, gs, abiotic environment\n4. Check if initial tc_leaf equals tc_leaf that closes the energy balance:\n   If false, re-run energy balance with a new tc_leaf\n   If true, then proceed\n5. Use tc_leaf, vcmax, jmax, gs, abiotic environment to calculate the carbon costs\n6. Check if carbon costs are minimal\n   If false, re-start at 1. with new parameters for vcmax, jmax, and gs\n   If true, return tc_leaf, vcmax, jmax, gs\n\n\n\n\n\nFigure 3.1: Algorithm for calculating optimal traits using the numerical P-Model coupled to a leaf energy balance model. The numerical P-Model parts are in purple. The energy balance model parts are in orange. Note that \\(J_{max}\\) is implemented here for reasons of completeness. The current optimization routine does not properly optimize \\(J_{max}\\)."
  },
  {
    "objectID": "03-algorithm.html#implementation",
    "href": "03-algorithm.html#implementation",
    "title": "3  Algorithm",
    "section": "3.2 Implementation",
    "text": "3.2 Implementation\nThe individual algorithms described above are based on two functions - one function to calculate the quantity to be optimized and one function for handling the optimization. Below are demonstrations for calling the algorithms separately and coupled. All functions can be found in the R directory of this repository.\nFirst, let’s set the variables for standard conditions that are used for example runs and the sensitivity analyses below.\n\n# Get reference values for standard conditions\n## Climate\ntc_air  &lt;- 25     # degC\ntc_leaf &lt;- 30     # degC\nvpd_air &lt;- 1500   # Pa\npatm    &lt;- 101325 # Pa\nco2     &lt;- 400    # ppm\nppfd    &lt;- 500e-6 # mol/m2/s\nfapar   &lt;- 1      # -\n\n## Traits\nvcmax   &lt;- 50e-6  # mol/m2/s\njmax    &lt;- 100e-6 # mol/m2/s\ngs      &lt;- 1.5e-6 # mol CO2 /m2/s/Pa\nkphio   &lt;- 0.087  # -\nbeta    &lt;- 146    # -\nc_cost  &lt;- 0.103  # -\nwind          &lt;-  2    # m/s\nleaf_size     &lt;-  0.02 # m\nstomata_ratio &lt;-  1    # -\nleaf_abs      &lt;-  0.5  # -\n\n\n3.2.1 Numerical P-Model\nThe relevant functions are:\n\n\n\n\n\n\ncalculate_traits_and_costs()\n\n\n\n\n\n\n\n#' Function to be optimized based on carbon costs for photosynthesis\n#'\n#' @details To achieve good numerical performance, the input values must be in per-day and not in per-second.\n#'\n#' @param par Input parameters in order: vcmax, jmax, gs [µmol/m^2/d]\n#' @param tc_leaf Leaf temperature [ºC]\n#' @param vpd_leaf Leaf vapor pressure deficit [Pa]\n#' @param ppfd Photosynthetically Active Photon Flux Density [µmol/m^2/s]\n#' @param fapar Fraction absorbed photosynthetically active radiation, set to 1 [-]\n#' @param co2 Atmospheric partial pressure of CO2 [Pa]\n#' @param patm Atmospheric pressure [Pa]\n#' @param kphio Calibrated quantum yield efficiency [-]\n#' @param beta Unit cost ratio for acquiring nitrogen over water [-]\n#' @param maximize Whether carbon cost metric should be maximized or not [TRUE/FALSE]\n#' @param return_all What to return. FALSE = carbon costs only. TRUE = all calculated variables\n#' @param units_out_per_second Whether output units should be in per-day or per-second [TRUE/FALSE]\n#' @param include_energy_balance Whether energy balance model should be coupled [TRUE/FALSE]\n#' @param ... Additional arguments to be piped \n#'\ncalculate_traits_and_costs &lt;- function(\n    par,\n    tc_air,\n    vpd_air,\n    ppfd,\n    fapar = 1,\n    co2,\n    patm,\n    kphio,\n    beta       = 146.0,\n    maximize   = FALSE,\n    return_all = TRUE,\n    units_out_per_second  = TRUE,\n    include_energy_balance = FALSE,\n    ...) {\n  \n  \n  ## 1: Parameters to be optimized:\n  vcmax &lt;- par[1]\n  jmax  &lt;- par[2]\n  gs    &lt;- par[3]\n  \n  ## x: Given gs, calculate the leaf temperature\n  if (include_energy_balance == TRUE) {\n    tc_leaf &lt;- \n      optimize_leaf_energy_balance(\n        tc_air  = tc_air,\n        vpd_air = vpd_air,\n        gs      = gs   / 3600 / 24, # Adjust input to per-second\n        ppfd    = ppfd / 3600 / 24, # Adjust input to per-second\n        patm    = patm,\n        ...\n      )\n    \n    vpd_leaf &lt;- air_vpd_to_leaf_vpd(vpd_air, tc_air, tc_leaf)\n    \n  } else {\n    tc_leaf  &lt;- tc_air\n    vpd_leaf &lt;- vpd_air\n  }\n  \n  ## 2: Get photosynthetic variables based on environmental conditions:\n  kmm       &lt;- rpmodel::kmm(tc_leaf, patm)\n  gammastar &lt;- rpmodel::gammastar(tc_leaf, patm)\n  ns_star   &lt;- rpmodel::viscosity_h2o(tc_leaf, patm) / rpmodel::viscosity_h2o(25, 101325)\n  ca        &lt;- rpmodel::co2_to_ca(co2, patm)\n  kphio     &lt;- kphio * rpmodel::ftemp_kphio( tc_leaf, c4 = F)\n  iabs      &lt;- ppfd * fapar\n  \n  ## 3: Calculate assimilation rates with to-be-optimized jmax, vcmax and gs:\n  \n  ## 3.1: Electron transport is limiting\n  ## Solve quadratic equation system using: A(Fick's Law) = A(Jmax Limitation)\n  ## This leads to a quadratic equation:\n  ## A * ci^2 + B * ci + C  = 0\n  ## 0 = a + b*x + c*x^2\n  \n  ## Jmax Limitation following Smith (1937):\n  ## A = gs * (ca - ci)\n  ## A = kphio * iabs (ci-gammastar)/ci+2*gammastar) * L\n  ## L = 1 / sqrt(1 + ((4 * kphio * iabs)/jmax)^2)\n  \n  ## with\n  L &lt;- 1.0 / sqrt(1.0 + ((4.0 * kphio * iabs)/jmax)^2)\n  A &lt;- -gs\n  B &lt;- gs * ca - 2 * gammastar * gs - L * kphio * iabs\n  C &lt;- 2 * gammastar * gs * ca + L * kphio * iabs * gammastar\n  \n  ci_j &lt;- QUADM(A, B, C)\n  a_j  &lt;- kphio * iabs * (ci_j - gammastar)/(ci_j + 2 * gammastar) * L  \n  \n  c_cost &lt;- 0.103 # As estimated by Wang et al. (2017)\n  \n  # ............................................................................\n  # ## Jmax Limitation following Farquhar (1989):\n  #   ## A = gs * (ca - ci)\n  #   ## A = j/4 * (ci-gammastar)/ci+2*gammastar)\n  #   ## j = (kphio * iabs + jmax - sqrt(( kphio * iabs + jmax)^2 - (4 * kphio * theta * iabs * jmax))) / (2*theta)\n  #   \n  #   ## with\n  #   theta &lt;- 0.85\n  #   j &lt;- (kphio * iabs + jmax - sqrt(( kphio * iabs + jmax)^2 - (4 * kphio * theta * iabs * jmax))) / (2 * theta)\n  #   A &lt;- -gs\n  #   B &lt;- gs * ca - 2 * gammastar * gs - j/4\n  #   C &lt;- 2 * gammastar * gs * ca + gammastar * j/4\n  #   \n  #   ci_j &lt;- ci_j &lt;- QUADM(A, B, C)\n  #   a_j &lt;- j/4 * (ci_j - gammastar)/(ci_j + 2 * gammastar)\n  #   \n  #   c_cost &lt;- 0.053 # As estimated by Smith et al. (2019)\n  # ............................................................................\n  \n  ## 4: Rubisco is limiting\n  ## Solve Eq. system\n  ## A = gs (ca- ci)\n  ## A = Vcmax * (ci - gammastar)/(ci + Kmm)\n  \n  ## This leads to a quadratic equation:\n  ## A * ci^2 + B * ci + C  = 0\n  ## 0 = a + b*x + c*x^2\n  \n  ## with\n  A &lt;- -1.0 * gs\n  B &lt;- gs * ca - gs * kmm - vcmax\n  C &lt;- gs * ca * kmm + vcmax * gammastar\n  \n  ci_c &lt;- QUADM(A, B, C)\n  a_c  &lt;- vcmax * (ci_c - gammastar) / (ci_c + kmm)\n  \n  ## 5. Take minimum of the two assimilation rates and maximum of the two ci\n  ci      &lt;- max(ci_c, ci_j)\n  a_gross &lt;- min( a_j, a_c ) # Original approach using min()\n  \n  # Alternative approach using hyperbolic minumum to avoid discontinuity (see Duursma et al (2015), Eq. (5))\n  # a_gross &lt;- -QUADP(A = 1 - 1E-07, B = a_c + a_j, C = a_c*a_j)\n  \n  ## 6. Get carbon costs\n  carbon_costs &lt;- \n    get_carbon_costs(\n      vpd_leaf  = vpd_leaf,\n      ns_star   = ns_star,\n      gs        = gs,\n      vcmax     = vcmax,\n      jmax      = jmax,\n      beta      = beta,\n      c_cost    = c_cost,\n      a_gross   = a_gross,\n      cost_type = \"relative_carbon_costs\"\n    )\n  \n  ## 7. Get additional variables\n  chi  &lt;- ci / ca\n  iwue &lt;- ca * (1 - chi) / 1.6\n  \n  # if (maximize) net_assim &lt;- -carbon_costs\n  \n  if (return_all) {\n    \n    ## Turn per-day units back into per-second\n    if (units_out_per_second == TRUE) {\n      vcmax   &lt;- vcmax   / (3600 * 24) # Final unit: [mol/m2/s]\n      jmax    &lt;- jmax    / (3600 * 24) # Final unit: [mol/m2/s]\n      gs      &lt;- gs      / (3600 * 24) # Final unit: [mol/m2/s/Pa]\n      a_c     &lt;- a_c     / (3600 * 24) # Final unit: [mol/m2/s]\n      a_j     &lt;- a_j     / (3600 * 24) # Final unit: [mol/m2/s]\n      a_gross &lt;- a_gross / (3600 * 24) # Final unit: [mol/m2/s]\n      # carbon_costs &lt;- carbon_costs / (3600 * 24) # Final unit: [-]\n    }\n    \n    ## Output\n    return(\n      tibble(\n        vcmax = vcmax,\n        jmax = jmax,\n        gs = gs,\n        ci = ci,\n        chi = chi,\n        a_c = a_c,\n        a_j = a_j,\n        a_gross = a_gross,\n        ci_c = ci_c,\n        ci_j = ci_j,\n        iwue = iwue,\n        kmm = kmm,\n        gammastar = gammastar,\n        ns_star = ns_star,\n        cost_transp = carbon_costs$cost_transp,\n        cost_vcmax = carbon_costs$cost_vcmax,\n        cost_jmax = carbon_costs$cost_jmax,\n        carbon_costs = carbon_costs$carbon_costs,\n        include_energy_balance = include_energy_balance,\n        tc_air  = tc_air,\n        tc_leaf = tc_leaf\n      )\n    )\n  } else {\n    return( carbon_costs$carbon_costs )\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\nget_carbon_costs()\n\n\n\n\n\n\n\n#' Function to calculate the carbon costs for photosynthesis\n#'\n#' @param ns_star Relative viscosity of water [-]\n#' @param gs Stomatal conductance of CO2 [µmol/m2/s]\n#' @param vpd_leaf Vapor pressure deficit at the leaf-level [Pa]\n#' @param beta Unit cost ratio of acquiring nitrogen over water [-]\n#' @param c_cost Marginal cost of maintaining Jmax [-]\n#' @param vcmax Maximum rate of carboxylation [µmol/m2/s]\n#' @param jmax Maximum rate of electron transport [µmol/m2/s]\n#' @param a_gross Gross assimilation rate [µmol/m2/s]\n#' @param cost_type Cost type that should be calculated\n#'\n#' @return List with cost for each each process and entire photosynthesis\nget_carbon_costs &lt;- function(\n    ns_star,\n    gs,\n    vpd_leaf,\n    beta,\n    vcmax,\n    c_cost,\n    jmax,\n    a_gross,\n    cost_type) {\n  \n  # Check input\n  cost_options &lt;- c(\"relative_carbon_costs\")\n  \n  if (!(cost_type %in% cost_options)) {\n    stop(\"get_carbon_costs: Requested cost type not implemented.\")\n    }\n  \n  cost_transp &lt;- 1.6 * ns_star * gs * vpd_leaf\n  cost_vcmax  &lt;- beta * vcmax\n  cost_jmax   &lt;- c_cost * jmax\n  \n  if (cost_type == \"relative_carbon_costs\") {\n    # With Jmax\n    carbon_costs &lt;- (cost_transp + cost_vcmax + cost_jmax) / a_gross\n    \n    # Without Jmax\n    # carbon_costs &lt;- (cost_transp + cost_vcmax) / a_gross\n  }\n  \n  out &lt;- list(\n    cost_transp  = cost_transp,\n    cost_vcmax   = cost_vcmax,\n    cost_jmax    = cost_jmax,\n    carbon_costs = carbon_costs\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\noptimize_traits_and_costs()\n\n\n\n\n\n\n\n#' Function to calculate the optimal traits and respective carbon costs\n#'\n#' @param tc_air Leaf temperature [ºC]\n#' @param vpd_air Leaf-level vapor-pressure deficit\n#' @param patm Atmospheric pressure [Pa]\n#' @param co2 Atmospheric CO2 concentration [ppm]\n#' @param ppfd Photosynthetically Active Photon Flux Density [µmol/m2/s]\n#' @param kphio Parameter for QYE [-]\n#' @param vcmax_start Starting values for vcmax in the optimization routine\n#' @param jmax_start Starting values for jmax in the optimization routine\n#' @param gs_start Starting values for gs in the optimization routine\n#' @param ... Additional arguments to be piped \n#'\noptimize_traits_and_costs &lt;- function(\n  tc_air,\n  vpd_air,\n  patm,\n  co2,\n  ppfd,\n  kphio,\n  include_energy_balance = FALSE,\n  vcmax_start = NA,\n  jmax_start  = NA,\n  gs_start    = NA,\n  ...\n) {\n  \n  ## Input for optimization has to be in per-day to work properly:\n  ppfd        &lt;- ppfd * 3600 * 24  # / 3600 / 24\n  vcmax_start &lt;- 5                # / 3600 / 24\n  jmax_start  &lt;- 10                # / 3600 / 24 \n  gs_start    &lt;- 0.05               # / 3600 / 24 \n  \n  ## Run optimization\n  ## (TODO: Output order of magnitude depends on lower/upper boundaries)\n  out_optim &lt;- optimr::optimr(\n    \n    ## Optimization inputs:\n    par        = c( vcmax_start,      jmax_start     , gs_start),\n    upper      = c( vcmax_start*100, jmax_start*100, gs_start*10 ),\n    lower      = c( vcmax_start/100, jmax_start/100, gs_start/10 ),\n    fn         = calculate_traits_and_costs,\n    method     = \"L-BFGS-B\",\n    control    = list(maxit = 1000),\n    \n    ## Function inputs:\n    tc_air     = tc_air,\n    vpd_air    = vpd_air,\n    patm       = patm,\n    co2        = co2,\n    ppfd       = ppfd,\n    kphio      = kphio,\n    include_energy_balance = include_energy_balance,\n    maximize   = TRUE,\n    return_all = FALSE,\n    ...)\n  \n  ## Get the carbon costs for the optimized traits\n  optimized_par &lt;- calculate_traits_and_costs(\n    par        = out_optim$par,\n    tc_air     = tc_air,\n    vpd_air    = vpd_air,\n    patm       = patm,\n    co2        = co2,\n    ppfd       = ppfd,\n    kphio      = kphio,\n    include_energy_balance = include_energy_balance,\n    units_out_per_second  = TRUE,\n    return_all = TRUE,\n    ...)\n  \n  ## Return optimized traits and carbon costs\n  return(optimized_par)\n}\n\n\n\n\n\n\n3.2.1.1 Comparison Against Analytical Solution\nBelow is a demonstration of the numerical P-Model algorithm without considering the leaf energy balance. Comparing the results of the numerical P-Model against the analytic P-Model shows that they achieve a similar \\(\\chi \\approx0.715\\) but with quite different values for \\(V_{cmax}\\), \\(J_{cmax}\\), and \\(g_{s}\\). This issue is explained further below.\n\n\nCode\nrpmodel::rpmodel(\n  tc = tc_air, \n  vpd = vpd_air, \n  co2 = co2, \n  fapar = 1, \n  ppfd = ppfd, \n  patm = patm, \n  kphio = kphio\n) |&gt; as_tibble() |&gt; \n  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6) |&gt; \n  relocate(vcmax, jmax, gs, chi, ci) |&gt; knitr::kable()\n\n\n\n\nTable 3.1: Output of analytic P-Model using standard conditions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvcmax\njmax\ngs\nchi\nci\ngpp\nca\ngammastar\nkmm\nns_star\nxi\nmj\nmc\niwue\nvcmax25\njmax25\nrd\n\n\n\n\n41.17731\n66.51527\n0.881992\n0.7154304\n28.99639\n0.0001222\n40.53\n4.332\n70.84225\n1\n82.82301\n0.654916\n0.2470426\n7.208503\n4.12e-05\n6.65e-05\n6e-07\n\n\n\n\n\n\n\n\nCode\n# Numerical P-Model\noptimize_traits_and_costs(\n  tc_air = tc_air,\n  vpd_air = vpd_air,\n  patm = patm,\n  co2 = co2,\n  ppfd = ppfd,\n  kphio = kphio,\n) |&gt;\n  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6) |&gt; \n  relocate(vcmax, jmax, gs, chi, ci) |&gt; knitr::kable()\n\n\n\n\nTable 3.2: Output of numerical P-Model using standard conditions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvcmax\njmax\ngs\nchi\nci\na_c\na_j\na_gross\nci_c\nci_j\niwue\nkmm\ngammastar\nns_star\ncost_transp\ncost_vcmax\ncost_jmax\ncarbon_costs\ninclude_energy_balance\ntc_air\ntc_leaf\n\n\n\n\n55.15741\n115.661\n1.182008\n0.715532\n29.00051\n1.36e-05\n1.36e-05\n1.36e-05\n29.00051\n28.99605\n7.205929\n70.84225\n4.332\n1\n245.1011\n695.7776\n1.029291\n799.9531\nFALSE\n25\n25\n\n\n\n\n\n\n\n\n3.2.1.2 Cost function\nFrom Equation 2.10, we can tell that the smaller the value for a trait becomes, the smaller the gross assimilation becomes and thus the carbon costs become larger. Above the minimum, the carbon costs become larger because of additional limitations to photosynthesis that do not allow for an even increase in gross assimilation with increasing trait.\nIn Figure 3.2, this sensitivity of the carbon costs against varying values of the different traits are displayed. As can be seen, there are distinct minima for the cost of transpiration (\\(g_s\\)) and for the cost of carboxylation (\\(V_{cmax}\\)). For the cost of electron transport however, there is no distinct minima (\\(J_{max}\\)).\nThe distinct minima for \\(V_{cmax}\\) and \\(g_{s}\\) occur where \\(A_{gross}\\) switches from \\(A_{c}\\)-limitation to \\(A_{j}\\)-limitation, i.e., at the coordination point of \\(A_{c} = A_{j}\\). At this point, increasing \\(V_{cmax}\\) or \\(g_{s}\\) only increases the costs without any gain in photosynthesis.\nIn Figure 3.2, there is no distinct minimum visible for \\(J_{max}\\) because its associated costs are comparably small; the cost-factor \\(\\beta\\) is set to 146, whereas \\(c\\) is set to 0.103. So, the algorithm finds a \\(J_{max}\\) that is simply large enough to not cause \\(A_{j}\\)-limitation but once \\(A_{c}\\) is limiting, \\(J_{max}\\) can increase indefinitely because of its low costs. Figure 3.3 zooms in on the \\(Cost ~ J_{max}\\) function, where the increase in costs with increasing \\(J_{max}\\) is visible. However, this increase is so small that the algorithm does not pick it up in the optimization routine.\n\n\nCode\n# Get reference dataframe\nn_steps &lt;- 50\ndf_base_cc &lt;- tibble(.rows = n_steps)\n\ndf_base_cc$vcmax      &lt;- rep(vcmax, n_steps)\ndf_base_cc$jmax       &lt;- rep(jmax, n_steps)\ndf_base_cc$gs         &lt;- rep(gs, n_steps)\ndf_base_cc$cost_total &lt;- rep(NA, n_steps)\ndf_base_cc$cost_vcmax &lt;- rep(NA, n_steps)\ndf_base_cc$cost_jmax  &lt;- rep(NA, n_steps)\ndf_base_cc$cost_gs    &lt;- rep(NA, n_steps)\n\ndf_cc &lt;- tibble()\n\n# Calculate carbon costs\nloop_carbon_costs &lt;- function(df_in, var) {\n  \n  for (i in 1:nrow(df_in)) {\n    \n    output &lt;- \n      calculate_traits_and_costs(\n        par = c(df_in$vcmax[i],\n                df_in$jmax[i],\n                df_in$gs[i]),\n        tc_air = tc_air,\n        vpd_air = vpd_air,\n        ppfd = ppfd,\n        co2 = co2,\n        patm = patm,\n        kphio = kphio,\n        include_energy_balance = FALSE,\n        return_all = TRUE,\n        units_out_per_second = TRUE\n      )\n      \n      df_in$cost_total[i] &lt;- output$carbon_costs\n      df_in$cost_vcmax[i] &lt;- output$cost_vcmax\n      df_in$cost_jmax[i]  &lt;- output$cost_jmax\n      df_in$cost_gs[i]    &lt;- output$cost_transp\n      \n  }\n  \n  df_out &lt;- \n    df_in |&gt; \n    select(starts_with(\"cost\"), !!var) |&gt; \n    # pivot_longer(\n    #   cols = starts_with(\"cost\"),\n    #   names_to = \"cost_name\",\n    #   values_to = \"cost_value\") |&gt; \n    pivot_longer(\n      cols = !!var,\n      names_to = \"var\",\n      values_to = \"val\")\n  \n  return(df_out)               \n}\n\n## Run function\n# Vcmax\ndf_tmp &lt;- df_base_cc\ndf_tmp$vcmax &lt;- seq(vcmax/10, vcmax*10, length.out = n_steps)\n\ndf_tmp  &lt;- loop_carbon_costs(df_tmp, \"vcmax\")\ndf_cc   &lt;- rbind(df_cc, df_tmp)\n\n# Jmax\ndf_tmp &lt;- df_base_cc\ndf_tmp$jmax &lt;- seq(jmax/10, jmax*10, length.out = n_steps)\n\ndf_tmp  &lt;- loop_carbon_costs(df_tmp, \"jmax\")\ndf_cc   &lt;- rbind(df_cc, df_tmp)\n\n# gs\ndf_tmp &lt;- df_base_cc\ndf_tmp$gs &lt;- seq(gs/10, gs*10, length.out = n_steps)\n\ndf_tmp  &lt;- loop_carbon_costs(df_tmp, \"gs\")\ndf_cc   &lt;- rbind(df_cc, df_tmp)\n\n## Plot it\ndf_cc |&gt; \n  ggplot() +\n  aes(x = val*1e6, y = cost_total) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~var, scales = \"free_x\") +\n  labs(title = \"Sensitivity of Carbon Costs\",\n       x = \"Trait value [mu mol/m^2/s]\",\n       y = \"Carbon Costs\") +\n  theme_classic()\n\n\n\n\n\nFigure 3.2: Sensitivity of the carbon costs defined in Equation 2.10 to changes in \\(V_{cmax}\\), \\(J_{cmax}\\), and \\(g_{s}\\). Distinct optimal minima are visible for \\(V_{cmax}\\) and \\(g_{s}\\), but not for \\(J_{max}\\).\n\n\n\n\n\n\nCode\ndf_cc |&gt; \n  ggplot() +\n  aes(x = val*1e6, y = cost_total) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~var, scales = \"free_x\") +\n  labs(title = \"Sensitivity of Carbon Costs (zoomed in)\",\n       x = \"Trait value [mu mol/m^2/s]\",\n       y = \"Carbon Costs\") +\n  theme_classic() + \n  ylim(750, 900)\n\n\n\n\n\nFigure 3.3: Sensitivity of the carbon costs defined in Equation 2.10 to changes in \\(V_{cmax}\\), \\(J_{cmax}\\), and \\(g_{s}\\). Same plot as Figure 3.2 but zoomed in to show minor increase in costs with increasing $J_{cmax}.\n\n\n\n\n\n\n\n3.2.2 Energy Balance\nThe relevant functions are:\n\n\n\n\n\n\ncalculate_leaf_energy_balance()\n\n\n\n\n\n\n\n#' Function to calculate the energy balance of a leaf\n#'\n#' @description This function calculates the energy balance of the leaf, given biotic and abiotic drivers. Output options are the difference between input-ed and calculated leaf temperature (\"balance\") or all calculated energy fluxes. Note: This functions has been taken from the {plantecophys} package and modified for new purposes here.\n#' \n#' @details This leaf energy balance model was adapted from Duursma, Remko A. 2015. “Plantecophys - An R Package for Analysing and Modelling Leaf Gas Exchange Data.” Edited by Paul C. Struik. &lt;i&gt;PLOS ONE&lt;/i&gt; 10 (11): e0143346. https://doi.org/10/bkmj. It is based on the Penman-Monteith equation in appendix of Leuning, R., F. M. Kelliher, D. G. G. Pury, and E.-D. Schulze. 1995. “Leaf Nitrogen, Photosynthesis, Conductance and Transpiration: Scaling from Leaves to Canopies.” &lt;i&gt;Plant, Cell and Environment&lt;/i&gt; 18 (10): 1183–1200. https://doi.org/10.1111/j.1365-3040.1995.tb00628.x.\n#'\n#' @param tc_leaf Assumed leaf Temperature [ºC]\n#' @param tc_air  Air Temperature [ºC]\n#' @param gs      Stomatal conductance of CO2 [mol/m2/s]\n#' @param ppfd    Photosynthetically Active Photon Flux Density [mol/m2/s]\n#' @param vpd_air Vapor pressure deficit of the air [Pa]\n#' @param patm    Atmospheric pressure [Pa]\n#' @param wind    Wind speed [m/s]\n#' @param leaf_size     Characteristic leaf width [m]\n#' @param stomata_ratio Stomatal ratio: 1 = Hypostomataous (stomata on one leaf side), 2 = Amphistomataous (stomata on both leaf sides) [-]\n#' @param leaf_abs      Leaf absorptance of solar radiation (range [0,1]) [-]\n#' @param return_what   Output to be returned (\"balance\" for squared difference between input and calculated leaf temperature, \"fluxes\" for all energy fluxes calculated by the energy balance)\n#'\ncalculate_leaf_energy_balance &lt;- function(\n  tc_leaf       = 21.5, \n  tc_air        = 20,\n  gs            = 1.5e-6,\n  ppfd          = 1500e-6, \n  vpd_air       = 2000, \n  patm          = 101325,\n  wind          = 2, \n  leaf_size     = 0.02,\n  stomata_ratio = 1,\n  leaf_abs      = 0.5, \n  return_what   = c(\"balance\",\"fluxes\")\n  ){\n\n  # Define arguments\n  return_what &lt;- match.arg(return_what)\n  \n  # Important!: Function uses different values than used in rpmodel\n  # gs from rpmodel is in mol CO2 / m2 / s / Pa\n  # gs here is in mol H2O / m2 / s\n  # Turning stomatal conductance of CO2 into conductance of H2O\n  gs   &lt;- 1.6 * gs * patm\n  ppfd &lt;- ppfd * 10^6 \n  \n  # Define constants\n  Boltz      &lt;- 5.67 * 10^-8 # w M-2 K-4\n  Emissivity &lt;- 0.95         # -\n  LatEvap    &lt;- 2.54         # MJ kg-1\n  CPAIR      &lt;- 1010.0       # J kg-1 K-1\n  \n  H2OLV0     &lt;- 2.501e6      # J kg-1\n  H2OMW      &lt;- 18e-3        # J kg-1\n  AIRMA      &lt;- 29.e-3       # mol mass air (kg/mol)\n  AIRDENS    &lt;- 1.204        # kg m-3\n  UMOLPERJ   &lt;- 4.57         # Micromole photons per Joule [-]\n  DHEAT      &lt;- 21.5e-6      # molecular diffusivity for heat\n  \n  # Density of dry air\n  AIRDENS &lt;- patm / (287.058 * celsius_to_kelvin(tc_air))\n\n  # Latent heat of water vapour at air temperature (J mol-1)\n  LHV &lt;- (H2OLV0 - 2.365E3 * tc_air) * H2OMW\n  \n  # Const s in Penman-Monteith equation  (Pa K-1)\n  SLOPE &lt;- (esat(tc_air + 0.1) - esat(tc_air)) / 0.1\n  \n  # Radiation conductance (mol m-2 s-1)\n  Gradiation &lt;- 4. * Boltz * celsius_to_kelvin(tc_air)^3 * Emissivity / (CPAIR * AIRMA)\n  \n  # See Leuning et al (1995) PC&E 18:1183-1200 Appendix E\n  # Boundary layer conductance for heat - single sided, forced convection\n  CMOLAR &lt;- patm / (8.314 * celsius_to_kelvin(tc_air)) # .Rgas() in package...\n  Gbhforced &lt;- 0.003 * sqrt(wind / leaf_size) * CMOLAR\n  \n  # Free convection\n  GRASHOF &lt;- 1.6E8 * abs(tc_leaf - tc_air) * (leaf_size^3) # Grashof number\n  Gbhfree &lt;- 0.5 * DHEAT * (GRASHOF^0.25) / leaf_size * CMOLAR\n  \n  # Total conductance to heat (both leaf sides)\n  Gbh &lt;- 2 * (Gbhfree + Gbhforced)\n  \n  # Heat and radiative conductance\n  Gbhr &lt;- Gbh + 2 * Gradiation\n  \n  # Boundary layer conductance for water (mol m-2 s-1)\n  Gbw &lt;- stomata_ratio * 1.075 * Gbh # Leuning 1995\n  gw &lt;- gs * Gbw / (gs + Gbw)\n  \n  # Longwave radiation\n  # (positive flux is heat loss from leaf)\n  Rlongup &lt;- Emissivity * Boltz * celsius_to_kelvin(tc_leaf)^4\n  \n  # Rnet\n  Rsol &lt;- 2 * ppfd / UMOLPERJ # W m-2\n  Rnet &lt;- leaf_abs * Rsol - Rlongup # full\n  \n  # Isothermal net radiation (Leuning et al. 1995, Appendix)\n  ea &lt;- esat(tc_air, patm) - vpd_air\n  ema &lt;- 0.642 * (ea / celsius_to_kelvin(tc_air))^(1 / 7)\n  \n  # Safety Check\n  if (is.na(ema)){\n    stop(\"calculate_leaf_energy_balance: `ema` is NA, likely due to unrealistic combination of given vpd and air temperature (too high vpd for that air temperature).\")\n  }\n  \n  Rnetiso &lt;- leaf_abs * Rsol - (1 - ema) * Boltz * celsius_to_kelvin(tc_air)^4\n  \n  # Isothermal version of the Penmon-Monteith equation\n  GAMMA &lt;- CPAIR * AIRMA * patm / LHV\n  ET &lt;- (1 / LHV) * (SLOPE * Rnetiso + vpd_air * Gbh * CPAIR * AIRMA) / (SLOPE + GAMMA * Gbhr / gw)\n  \n  # Latent heat loss\n  lambdaET &lt;- LHV * ET\n  \n  # Heat flux calculated using Gradiation (Leuning 1995, Eq. 11)\n  Y &lt;- 1 / (1 + Gradiation / Gbh)\n  H2 &lt;- Y * (Rnetiso - lambdaET)\n  \n  # Heat flux calculated from leaf-air T difference.\n  # (positive flux is heat loss from leaf)\n  H &lt;- -CPAIR * AIRDENS * (Gbh / CMOLAR) * (tc_air - tc_leaf)\n  \n  # Leaf-air temperature difference recalculated from energy balance.\n  # (same equation as above!)\n  tc_leaf2 &lt;- tc_air + H2 / (CPAIR * AIRDENS * (Gbh / CMOLAR))\n  \n  # Difference between input tc_leaf and calculated, this will be minimized.\n  EnergyBal &lt;- (tc_leaf - tc_leaf2)           # OLD, needed to work with uniroot()\n  # EnergyBal &lt;- (tc_leaf - tc_leaf2)^2           # NEW, needed to work with optimr()\n  # EnergyBal &lt;- abs(tc_leaf - tc_leaf2)        # NEW, needs more iterations than ()^2\n  \n  if (return_what == \"balance\") {\n    return(EnergyBal) # OLD\n  \n    # out &lt;- list(tc_leaf       = tc_leaf,     # NEW\n    #                       tc_leaf_star  = tc_leaf2,    # NEW\n    #                       eps           = EnergyBal) # NEW\n    # return(out)                            # NEW\n  }\n  \n  if (return_what == \"fluxes\") {\n    l &lt;- data.frame(ELEAFeb = 1000 * ET, Gradiation = Gradiation, Rsol = Rsol, Rnetiso = Rnetiso, Rlongup = Rlongup, H = H, lambdaET = lambdaET, gw = gw, Gbh = Gbh, H2 = H2, tc_leaf2 = tc_leaf2)\n    return(l)\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\noptimize_leaf_energy_balance()\n\n\n\n\n\n\n\n#' Optimization of the leaf energy balance temperature difference\n#' \n#' @details This function minimizes the difference between input and energy-balance-closure leaf temperature calculated in calculation_leaf_energy_balance().\n#'\n#' @param tc_air Leaf temperature [ºC]\n#' @param vpd_air Leaf vapor pressure deficit [Pa]\n#' @param gs Stomatal conductance [µmol CO2 /m^2/s]\n#' @param ppfd Photosynthetically Active Photon Flux Density [µmol/m^2/s]\n#' @param patm Atmospheric pressure [Pa] \n#' @param ... Additional arguments to be piped \n#'\noptimize_leaf_energy_balance &lt;- function(\n    tc_air,\n    vpd_air,\n    gs,\n    ppfd,\n    patm,\n    ...) { # ... for any additional leaf energy balance parameter like wind\n      \n    ## IN DEV:\n    sol_optimize &lt;- uniroot(\n      f             = calculate_leaf_energy_balance,\n      interval      = c(max(tc_air - 15, 1), tc_air + 15),\n      # interval      = c(0, 50),\n      tc_air        = tc_air,\n      vpd_air       = vpd_air,\n      gs            = gs,\n      ppfd          = ppfd,\n      patm          = patm,\n      return_what   = \"balance\",\n      ...\n    )\n    \n    tc_leaf &lt;- sol_optimize$root\n    \n    return(tc_leaf)\n    \n    ## TODO: OPTIM() AND OPTIMR() BELOW CRASH FOR SOME REASON...\n    \n    # out_optim &lt;- optimr::optimr(\n    #     \n    #     ## Optimization inputs:\n    #     par        = tc_air,\n    #     lower      = 1,\n    #     upper      = 40,\n    #     fn         = diff_tcleaf_in_and_tcleaf_eb,\n    #     method     = \"L-BFGS-B\",\n    #     control    = list(maxit = 1000),\n    #     \n    #     ## Function inputs:\n    #     tc_air = tc_air,\n    #     ppfd = ppfd,\n    #     patm = patm,\n    #     co2 = co2,\n    #     vpd = vpd,\n    #     kphio = kphio,\n    #     method_jmaxlim_inst = method_jmaxlim_inst,\n    #     method_eb = method_eb)\n    #     \n    # out_optim &lt;- optim(\n    # \n    #     ## Optimization inputs:\n    #     par        = tc_air,\n    #     lower      = 1,\n    #     upper      = 40,\n    #     fn         = diff_tcleaf_in_and_tcleaf_eb,\n    #     method     = \"L-BFGS-B\",\n    #     control    = list(maxit = 1000),\n    # \n    #     ## Function inputs:\n    #     tc_air = tc_air,\n    #     ppfd = ppfd,\n    #     patm = patm,\n    #     co2 = co2,\n    #     vpd = vpd,\n    #     kphio = kphio,\n    #     method_jmaxlim_inst = method_jmaxlim_inst,\n    #     method_eb = method_eb)\n}\n\n\n\n\n\nBelow is a demonstration of the energy balance functions and a sensitivity analysis. The difference between input leaf temperature and energy-balance-closure leaf temperature is:\n\ncalculate_leaf_energy_balance(  \n  tc_leaf       = tc_leaf, \n  tc_air        = tc_air,\n  gs            = gs,\n  ppfd          = ppfd, \n  vpd_air       = vpd_air, \n  patm          = patm,\n  return_what   = c(\"balance\")\n)\n\n[1] 5.933511\n\n\nThe energy balance variables under the given conditions are:\n\ncalculate_leaf_energy_balance(  \n  tc_leaf       = tc_leaf, \n  tc_air        = tc_air,\n  gs            = gs,\n  ppfd          = ppfd, \n  vpd_air       = vpd_air, \n  patm          = patm,\n  return_what   = c(\"fluxes\")\n) |&gt; knitr::kable()\n\n\nEnergy balance output at given difference between input and energy-balance-closure leaf temperature. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nELEAFeb\nGradiation\nRsol\nRnetiso\nRlongup\nH\nlambdaET\ngw\nGbh\nH2\ntc_leaf2\n\n\n\n\n2.562691\n0.1949628\n218.8184\n29.60964\n454.922\n416.2046\n112.6399\n0.2252718\n2.845609\n-77.7063\n24.06649\n\n\n\n\n\nAfter minimizing the difference between input and energy-balance-closure leaf temperature, the final predicted leaf temperature is:\n\noptimize_leaf_energy_balance(\n tc_air  = tc_air,\n vpd_air = vpd_air,\n gs      = gs,\n ppfd    = ppfd,\n patm    = patm,\n)\n\n[1] 24.04191\n\n\n\n3.2.2.1 Sensitivity Analysis\n\n3.2.2.1.1 Abiotic drivers\nAs shown in Figure 3.4 and Figure 3.5. The main abiotic drivers of the modeled leaf temperature are variables that directly drive the leave’s energy input: light and air temperature. The air temperature is the main driver of leaf temperature. Interestingly, the energy balance model simulates a strong decoupling of leaf and air temperatures. At low air temperatures, the leaf is warmer than the air. And at high air temperatures, the leaf is cooler. This is likely driven by the co-occurring temperature-driven change in vapor pressure deficit that increases evaporative cooling.\nThe incoming light is the main source of short-wave energy input, and is therefore also a strong driver of leaf temperature. At low light levels, leaves are modeled to be cooler than air. At high light values, however, the leaf becomes substantially warmer than the air.\nAt higher wind speeds, the boundary conductance layer becomes thinner (i.e., the boundary layer conductance increases). This drives an equilibration of leaf and air temperatures, so that there is less decoupling at high wind speeds.\n\n\nCode\n# Define function first --------------------------------------------------------\nrun_fun &lt;- function(df, var) {\n  \n  for (i in 1:nrow(df)) {\n    \n    # print(i)\n    \n    df$tc_leaf[i] &lt;- \n      optimize_leaf_energy_balance(\n        tc_air  = df$tc_air[i],\n        vpd_air = df$vpd_air[i],\n        gs      = df$gs[i],\n        ppfd    = df$ppfd[i],\n        patm    = df$patm[i],\n        wind    = df$wind[i],\n        leaf_size = df$leaf_size[i],\n        stomata_ratio = df$stomata_ratio[i],\n        leaf_abs = df$leaf_abs[i]\n        )\n    \n      df$tc_diff[i] = df$tc_leaf[i] - df$tc_air[i]\n  }\n  \n  df_out &lt;- df |&gt; \n    select(c(!!var, \"tc_leaf\", \"tc_diff\")) |&gt; \n    pivot_longer(cols = !!var)\n  \n  return(df_out)\n}\n\n# Create empty df for plotting  ------------------------------------------------\ndf_abio &lt;- tibble()\ndf_bio  &lt;- tibble()\n\n# Create base df for sensitivity analysis  -------------------------------------\nn_steps &lt;- 20\ndf_base &lt;- tibble(.rows = n_steps)\ndf_base$tc_air    &lt;- rep(tc_air  , n_steps)\ndf_base$vpd_air   &lt;- rep(vpd_air , n_steps)\ndf_base$gs        &lt;- rep(gs      , n_steps)\ndf_base$co2       &lt;- rep(co2     , n_steps)\ndf_base$ppfd      &lt;- rep(ppfd    , n_steps)\ndf_base$patm      &lt;- rep(patm    , n_steps)\ndf_base$wind      &lt;- rep(wind    , n_steps)\ndf_base$leaf_size &lt;- rep(leaf_size, n_steps)\ndf_base$leaf_abs  &lt;- rep(leaf_abs, n_steps)\ndf_base$tc_leaf   &lt;- rep(NA, n_steps)\ndf_base$tc_diff   &lt;- rep(NA, n_steps)\ndf_base$stomata_ratio   &lt;- rep(1, stomata_ratio)\ndf_base$kphio     &lt;- rep(kphio, stomata_ratio)\n\n# Run function across all variables  -------------------------------------------\n\n### ABIOTIC VARIABLES \n## Air temperature and VPD\ndf_tmp &lt;- df_base\ndf_tmp$tc_air  &lt;- seq(1, 50, length.out = n_steps)\n\n# Account for changes in vpd when temperature changes:\ndf_tmp$vpd_air &lt;- \n  air_vpd_to_leaf_vpd(\n    vpd_air = vpd_air,\n    tc_air = tc_air,\n    tc_leaf = df_tmp$tc_air)\n\n# Removing negative vpd values\n# df_tmp &lt;- mutate(df_tmp, vpd_air = ifelse(vpd_air &lt; 0, 10, vpd_air))\n\ndf_tmp &lt;- run_fun(df_tmp, \"tc_air\")\ndf_abio &lt;- rbind(df_abio, df_tmp)\n\n# VPD\ndf_tmp &lt;- df_base\ndf_tmp$vpd_air  &lt;- seq(vpd_air/2, vpd_air*2, length.out = n_steps)\n\ndf_tmp &lt;- run_fun(df_tmp, \"vpd_air\")\ndf_abio &lt;- rbind(df_abio, df_tmp)\n\n# PPFD\ndf_tmp &lt;- df_base\ndf_tmp$ppfd  &lt;- seq(ppfd/10, ppfd*10, length.out = n_steps)\n\ndf_tmp &lt;- run_fun(df_tmp, \"ppfd\")\ndf_abio &lt;- rbind(df_abio, df_tmp)\n\n# Atmospheric pressure\ndf_tmp &lt;- df_base\ndf_tmp$patm  &lt;- seq(patm/10, patm*10, length.out = n_steps)\n\ndf_tmp &lt;- run_fun(df_tmp, \"patm\")\ndf_abio &lt;- rbind(df_abio, df_tmp)\n\n# Wind\ndf_tmp &lt;- df_base\ndf_tmp$wind  &lt;- seq(wind/10, wind*10, length.out = n_steps)\n\ndf_tmp &lt;- run_fun(df_tmp, \"wind\")\ndf_abio &lt;- rbind(df_abio, df_tmp)\n\n### BIOTIC VARIABLES\n# Stomatal Conductance\ndf_tmp &lt;- df_base\ndf_tmp$gs  &lt;- seq(gs/10, gs*10, length.out = n_steps)\n\ndf_tmp &lt;- run_fun(df_tmp, \"gs\")\ndf_bio &lt;- rbind(df_bio, df_tmp)\n\n# Leaf Size\ndf_tmp &lt;- df_base\ndf_tmp$leaf_size  &lt;- seq(leaf_size/10, leaf_size*10, length.out = n_steps)\n\ndf_tmp &lt;- run_fun(df_tmp, \"leaf_size\")\ndf_bio &lt;- rbind(df_bio, df_tmp)\n\n# Leaf absorptance\ndf_tmp &lt;- df_base\ndf_tmp$leaf_abs  &lt;- seq(leaf_abs/10, leaf_abs*10, length.out = n_steps)\n\ndf_tmp &lt;- run_fun(df_tmp, \"leaf_abs\")\ndf_bio &lt;- rbind(df_bio, df_tmp)\n\n# Stomatal Ratio\ndf_tmp &lt;- df_base |&gt; slice(1:2)\ndf_tmp$stomata_ratio  &lt;- c(1, 2)\n\ndf_tmp &lt;- run_fun(df_tmp, \"stomata_ratio\")\ndf_bio &lt;- rbind(df_bio, df_tmp)\n\ndf_abio$name &lt;- as.factor(df_abio$name)\ndf_bio$name &lt;- as.factor(df_bio$name)\n\n\n\n\nCode\ndf_abio |&gt; \n  ggplot() +\n  aes(x = value,\n      y = tc_leaf) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(0, 50) + \n  labs(title = \"Sensitivity of tc_leaf to abiotic drivers.\",\n       y = \"T_leaf [ºC]\",\n       x = \"Variable value\") +\n  theme_classic()\n\n\n\n\n\nFigure 3.4: Sensitivity of modeled leaf temperature to abiotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions. For the sensitivity to air temperature, however, the temperature-driven change in vapor pressure deficit is additionally accounted for. The energy model breaks if too low temperatures and high vapor pressure deficits at low air temperatures are entered.\n\n\n\n\n\n\nCode\ndf_abio |&gt; \n  ggplot() +\n  aes(x = value,\n      y = tc_diff) +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(-7.5, 7.5) +\n  labs(title = \"Sensitivity of delta T to abiotic drivers\",\n       subtitle = \"Below dotted line means the leaf is cooler\",\n       y = \"T_leaf - T_air [ºC]\",\n       x = \"Variable value\") +\n  theme_classic()\n\n\n\n\n\nFigure 3.5: Sensitivity of the difference between modeled leaf temperature and air temperature to abiotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions.\n\n\n\n\n\n\n3.2.2.1.2 Biotic drivers\nAgain, the main drivers of leaf temperature are variables that directly influence the amount of energy taken up or released by the leaf: stomatal conductance and leaf absorptance (see Figure 3.6 and Figure 3.7). The larger the stomatal conductance, the more transpirative cooling occurs, the stronger the leaf is cooled. However, this increase has a saturating effect and the same increase in stomatal conductance does not always lead to the same decrease in leaf temperature. The leaf absorptance controls how much of the incoming short-wave radiation is absorbed by the leaf and therefore scales leaf temperatures linearly. Smaller leaves have smaller boundary layers and their temperature are thus more quickly equilibrated with air temperatures. Interestingly, given the standard conditions here, a larger leaf leads to constantly cooler leaves.\n\n\n\n\n\n\nWarning\n\n\n\nIn general, the model analysis shows that leaves can cool significantly below air temperatures. However, this could be an artifact of picking a relatively high stomatal conductance that drives this cooling. Real-world situations may have substantially lower values for stomatal conductance leading to less cooling.\n\n\n\n\nCode\ndf_bio |&gt; \n  ggplot() +\n  aes(x = value,\n      y = tc_leaf) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(0, 50) + \n  labs(title = \"Sensitivity of tc_leaf to biotic drivers.\",\n       y = \"T_leaf [ºC]\",\n       x = \"Variable value\") +\n  theme_classic()\n\n\n\n\n\nFigure 3.6: Sensitivity of modeled leaf temperature to biotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions.\n\n\n\n\n\n\nCode\ndf_bio |&gt; \n  ggplot() +\n  aes(x = value,\n      y = tc_diff) +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_x\") +\n  ylim(-7.5, 7.5) +\n  labs(title = \"Sensitivity of delta T to biotic drivers\",\n       subtitle = \"Below dotted line means the leaf is cooler\",\n       y = \"T_leaf - T_air [ºC]\",\n       x = \"Variable value\") +\n  theme_classic()\n\n\n\n\n\nFigure 3.7: Sensitivity of the difference between modeled leaf temperature and air temperature to biotic drivers. Shown is the response to the respective variable when all other variables are kept constant at their standard conditions.\n\n\n\n\n\n\n\n\n3.2.3 Coupled Model\nBelow is a demonstration for the predictions of the numerical P-Model with and without the energy balance coupled. By comparing Table 3.3 and Table 3.4 below, we see that under standard conditions, the coupled model tends to predict a lower \\(V_{cmax}\\) and \\(T_{leaf}\\); a higher \\(g_{s}\\) and \\(\\chi\\); and a similar \\(J_{max}\\).\nFigure 3.8 shows how this difference of predicted traits plays out along a gradient of air temperatures. First of all, it is clearly visible that there are numerical instabilities occurring at low air temperatures. As explained above and re-emphasized in the box below, this is likely due to the delicate sensitivity of the energy balance model to the given input of vapor pressure deficit and air temperature.\nNonetheless, two important dynamics can be identified: First, attaching the energy balance frees stomatal conductance to regulate leaf temperatures. At low temperatures, the model predicts that it is beneficial to have increase leaf temperatures to reduce carbon costs. However, it is important to note that this could also be a consequence of the forcing to the energy balance itself (see Figure 3.5 and box below). Vice versa, there is a tendency to increase stomatal conductance at high air temperatures to cool leaves and thereby minimize the carbon costs.\nThese higher leaf temperatures translate to the second dynamic to highlight: We see a reduction in predicted \\(V_{cmax}\\) at these high temperatures, as it is predicted by the Least-Cost Hypothesis: At higher temperatures, costs can be reduced by reducing investments into \\(V_{cmax}\\) whilst still benefiting from increasing assimilation due to faster enzyme kinetics. In theory, this should also apply to \\(J_{max}\\). However, due to its minor influence on the overall costs - as described above - there is no clear change in its prediction when coupling the energy balance model.\n\n\n\n\n\n\nAn important note on the results shown below.\n\n\n\nNote that the assumed vapor pressure deficit, how it changes with air temperature, and how it plays into stomatal conductance is highly influential on the numerical stability of the entire routine. We are not using any real-world data here, which causes the temperature-driven vapor pressure deficit calculation to likely have unrealistically low (or strongly negative) values. As a consequence, the effect of having warmer leaf-than-air temperatures may be a forcing artifact!\n\n\n\n3.2.3.0.1 Standard Conditions\n\n\nCode\n# Numerical P-Model\noptimize_traits_and_costs(\n  tc_air = tc_air,\n  vpd_air = vpd_air,\n  patm = patm,\n  co2 = co2,\n  ppfd = ppfd,\n  kphio = kphio,\n  include_energy_balance = FALSE\n) |&gt;\n  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6, a_gross = a_gross * 1e6) |&gt; \n  relocate(vcmax, jmax, gs, chi, ci, a_gross) |&gt; knitr::kable()\n\n\n\n\nTable 3.3: Output of numerical P-Model without coupled energy balance model, under standard conditions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvcmax\njmax\ngs\nchi\nci\na_gross\na_c\na_j\nci_c\nci_j\niwue\nkmm\ngammastar\nns_star\ncost_transp\ncost_vcmax\ncost_jmax\ncarbon_costs\ninclude_energy_balance\ntc_air\ntc_leaf\n\n\n\n\n55.15741\n115.661\n1.182008\n0.715532\n29.00051\n13.62794\n1.36e-05\n1.36e-05\n29.00051\n28.99605\n7.205929\n70.84225\n4.332\n1\n245.1011\n695.7776\n1.029291\n799.9531\nFALSE\n25\n25\n\n\n\n\n\n\n\n\nCode\n# Coupled Numerical P-Model\n# To call the coupled model, simply set `include_energy_balance == TRUE`\n\noptimize_traits_and_costs(\n  tc_air = tc_air,\n  vpd_air = vpd_air,\n  patm = patm,\n  co2 = co2,\n  ppfd = ppfd,\n  kphio = kphio,\n  include_energy_balance = TRUE\n) |&gt;\n  mutate(vcmax = vcmax * 1e6, jmax = jmax * 1e6, gs = gs * 1e6, a_gross = a_gross * 1e6) |&gt; \n  relocate(vcmax, jmax, gs, chi, ci, a_gross) |&gt; knitr::kable()\n\n\n\n\nTable 3.4: Output of numerical P-Model with coupled energy balance model, under standard conditions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvcmax\njmax\ngs\nchi\nci\na_gross\na_c\na_j\nci_c\nci_j\niwue\nkmm\ngammastar\nns_star\ncost_transp\ncost_vcmax\ncost_jmax\ncarbon_costs\ninclude_energy_balance\ntc_air\ntc_leaf\n\n\n\n\n51.76301\n115.6061\n1.353449\n0.7441638\n30.16096\n14.03397\n1.4e-05\n1.4e-05\n30.16096\n30.15953\n6.48065\n65.79614\n4.145103\n1.01989\n255.8348\n652.9593\n1.028801\n750.3477\nTRUE\n25\n24.14085\n\n\n\n\n\n\n\n\n3.2.3.0.2 Sensitivity Analysis\n\n\nCode\n## Air temperature and VPD\ndf_tmp &lt;- df_base\ndf_tmp$tc_air  &lt;- seq(1, 50, length.out = n_steps)\ndf_tmp$data    &lt;- NA\n\n# Account for changes in vpd when temperature changes:\ndf_tmp$vpd_air &lt;- \n  air_vpd_to_leaf_vpd(\n    vpd_air = vpd_air,\n    tc_air = tc_air,\n    tc_leaf = df_tmp$tc_air)\n\n# Removing negative vpd values\n# df_tmp &lt;- mutate(df_tmp, vpd_air = ifelse(vpd_air &lt; 0, 0, vpd_air))\n\n# With and Without EB\ndf_with_eb &lt;- df_tmp\ndf_wout_eb &lt;- df_tmp\n\n# Run loop\nfor (i in 1:nrow(df_tmp)) {\n  \n  # cat(\"\\n Working on\", i, \"/\", nrow(df_tmp))\n  \n  df_with_eb$data[i] &lt;- \n    optimize_traits_and_costs(\n      tc_air  = df_with_eb$tc_air[i],\n      vpd_air = df_with_eb$vpd_air[i],\n      ppfd    = df_with_eb$ppfd[i],\n      patm    = df_with_eb$patm[i],\n      co2     = df_with_eb$co2[i],\n      kphio   = df_with_eb$kphio[i],\n      include_energy_balance = TRUE\n      ) |&gt; list()\n  \n  df_wout_eb$data[i] &lt;- \n    optimize_traits_and_costs(\n      tc_air  = df_wout_eb$tc_air[i],\n      vpd_air = df_wout_eb$vpd_air[i],\n      ppfd    = df_wout_eb$ppfd[i],\n      patm    = df_wout_eb$patm[i],\n      co2     = df_wout_eb$co2[i],\n      kphio   = df_wout_eb$kphio[i],\n      include_energy_balance = FALSE\n      ) |&gt; list()\n}\n\n# Finish up dataframes\n\nvars_tc &lt;- c(\"tc_air\", \"tc_leaf\", \"tc_diff\")\nvars_pm &lt;- c(\"vcmax\", \"jmax\", \"gs\", \"chi\")\n\ndf_with_eb &lt;- \n  df_with_eb |&gt; \n  select(data) |&gt; \n  unnest(data) |&gt;\n  select(any_of(c(vars_tc, vars_pm))) |&gt; \n  mutate(tc_diff = tc_leaf - tc_air) |&gt; \n  pivot_longer(cols = !any_of(vars_tc)) |&gt; \n  mutate(name = as.factor(name))\n\ndf_wout_eb &lt;- \n  df_wout_eb |&gt; \n  select(data) |&gt; \n  unnest(data) |&gt;\n  select(any_of(c(vars_tc, vars_pm))) |&gt; \n  mutate(tc_diff = tc_leaf - tc_air) |&gt; \n  pivot_longer(cols = !any_of(vars_tc)) |&gt; \n  mutate(name = as.factor(name))\n\ndf_fin &lt;- \n  rbind(\n    df_wout_eb |&gt; mutate(energy_balance = FALSE),\n    df_with_eb |&gt; mutate(energy_balance = TRUE)\n    )\n\n\n\n\nCode\ndf_fin |&gt; \n  ggplot() +\n  aes(y = value,\n      x = tc_air,\n      color = energy_balance) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~name, \n             scales = \"free_y\") +\n  labs(title = \"Sensitivity of traits to tc_air\",\n       x = \"T_air [ºC]\",\n       y = \"Trait Value\") +\n  theme_classic()\n\n\n\n\n\nFigure 3.8: Sensitivity of predicted optimal traits to whether the energy balance model is coupled or not.\n\n\n\n\n\n\nCode\ndf_fin |&gt; \n  select(tc_air, tc_diff, energy_balance) |&gt; \n  distinct() |&gt; \n  ggplot() +\n  aes(y = tc_diff,\n      x = tc_air,\n      color = energy_balance) +\n  geom_hline(yintercept = 0, lty = \"dotted\") +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Sensitivity of air-to-leaf temperature difference to tc_air\",\n       subtitle = \"Below the dotted line means the leaf is cooler than air\",\n       x = \"T_air [ºC]\",\n       y = \"T_leaf - T_air [ºC]\") +\n  ylim(-8, 8) +\n  theme_classic() \n\n\n\n\n\nFigure 3.9: Sensitivity of the leaf-to-air temperature difference to changes in air temperatures for the coupled and non-coupled models. Note that the non-coupled model does not model any leaf temperature and simply assumed air and leaf temperatures are the same.\n\n\n\n\n\n\n3.2.3.1 Cost Function Sensitivity\nFigure 3.10 shows that coupling the energy balance does not alter the existence of distinct minima. As in Figure 3.2, there are distinct minima for \\(V_{cmax}\\) and \\(g_{s}\\). \\(J_{max}\\) also has a minima but due to its little influence on the carbon costs, the optimization algorithm cannot find that minima and tends to predict too high values for \\(J_{max}\\).\n\n\nCode\n# Get reference dataframe\nn_steps &lt;- 50\ndf_base_cc &lt;- tibble(.rows = n_steps)\n\ndf_base_cc$vcmax      &lt;- rep(vcmax, n_steps)\ndf_base_cc$jmax       &lt;- rep(jmax, n_steps)\ndf_base_cc$gs         &lt;- rep(gs, n_steps)\ndf_base_cc$cost_total &lt;- rep(NA, n_steps)\ndf_base_cc$cost_vcmax &lt;- rep(NA, n_steps)\ndf_base_cc$cost_jmax  &lt;- rep(NA, n_steps)\ndf_base_cc$cost_gs    &lt;- rep(NA, n_steps)\n\ndf_cc &lt;- tibble()\n\n# Calculate carbon costs\nloop_carbon_costs &lt;- function(df_in, var) {\n  \n  for (i in 1:nrow(df_in)) {\n    \n    output &lt;- \n      calculate_traits_and_costs(\n        par = c(df_in$vcmax[i],\n                df_in$jmax[i],\n                df_in$gs[i]),\n        tc_air = tc_air,\n        vpd_air = vpd_air,\n        ppfd = ppfd,\n        co2 = co2,\n        patm = patm,\n        kphio = kphio,\n        include_energy_balance = TRUE,\n        return_all = TRUE,\n        units_out_per_second = TRUE\n      )\n      \n      df_in$cost_total[i] &lt;- output$carbon_costs\n      df_in$cost_vcmax[i] &lt;- output$cost_vcmax\n      df_in$cost_jmax[i]  &lt;- output$cost_jmax\n      df_in$cost_gs[i]    &lt;- output$cost_transp\n      \n  }\n  \n  df_out &lt;- \n    df_in |&gt; \n    select(starts_with(\"cost\"), !!var) |&gt; \n    # pivot_longer(\n    #   cols = starts_with(\"cost\"),\n    #   names_to = \"cost_name\",\n    #   values_to = \"cost_value\") |&gt; \n    pivot_longer(\n      cols = !!var,\n      names_to = \"var\",\n      values_to = \"val\")\n  \n  return(df_out)               \n}\n\n## Run function\n# Vcmax\ndf_tmp &lt;- df_base_cc\ndf_tmp$vcmax &lt;- seq(vcmax/10, vcmax*10, length.out = n_steps)\n\ndf_tmp  &lt;- loop_carbon_costs(df_tmp, \"vcmax\")\ndf_cc   &lt;- rbind(df_cc, df_tmp)\n\n# Jmax\ndf_tmp &lt;- df_base_cc\ndf_tmp$jmax &lt;- seq(jmax/10, jmax*10, length.out = n_steps)\n\ndf_tmp  &lt;- loop_carbon_costs(df_tmp, \"jmax\")\ndf_cc   &lt;- rbind(df_cc, df_tmp)\n\n# gs\ndf_tmp &lt;- df_base_cc\ndf_tmp$gs &lt;- seq(gs/10, gs*10, length.out = n_steps)\n\ndf_tmp  &lt;- loop_carbon_costs(df_tmp, \"gs\")\ndf_cc   &lt;- rbind(df_cc, df_tmp)\n\n## Plot it\ndf_cc |&gt; \n  ggplot() +\n  aes(x = val*1e6, y = cost_total) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~var, scales = \"free_x\") +\n  labs(title = \"Sensitivity of Carbon Costs (with energy balance)\",\n       x = \"Trait value [mu mol/m^2/s]\",\n       y = \"Relative Carbon Costs\") +\n  theme_classic()\n\n\n\n\n\nFigure 3.10: Sensitivity of the carbon costs defined in Equation 2.10 to changes in \\(V_{cmax}\\), \\(J_{cmax}\\), and \\(g_{s}\\) when energy balance is coupled.\n\n\n\n\n\n\nCode\ndf_cc |&gt; \n  ggplot() +\n  aes(x = val*1e6, y = cost_total) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~var, scales = \"free_x\") +\n  labs(title = \"Sensitivity of Carbon Costs (with energy balance)\",\n       x = \"Trait value [mu mol/m^2/s]\",\n       y = \"Relative Carbon Costs\") +\n  theme_classic() +\n  ylim(750, 900)\n\n\n\n\n\nFigure 3.11: Sensitivity of the carbon costs defined in Equation 2.10 to changes in \\(V_{cmax}\\), \\(J_{cmax}\\), and \\(g_{s}\\) when energy balance is coupled. Same plot as Figure 3.10 but zoomed in to show minor increase in costs with increasing \\(J_{cmax}\\)."
  },
  {
    "objectID": "98-next-steps.html#refining-numerical-p-model",
    "href": "98-next-steps.html#refining-numerical-p-model",
    "title": "4  Next Steps",
    "section": "4.1 Refining Numerical P-Model",
    "text": "4.1 Refining Numerical P-Model\nThe optimization criteria in Equation 2.10 seems to fail to optimize \\(J_{max}\\) and has other peculiarities to it. To resolve this issue one could work on the following tasks:\n\nThe entire formulation for the cost criteria could be revised. Here are a few starting points:\n\nInstead of optimizing gross assimilation, the traits could be optimized with respect to the assimilation rate they constitute (\\(A_c\\) for \\(V_{cmax}\\), \\(A_j\\) for \\(J_{max}\\))\nInstead of taking the relative carbon costs, one could take the absolute costs.\nInstead of using a cost-minimization approach, one could use a profit-maximization approach (Joshi et al., 2022).\nHigher leaf temperatures directly affect respiration, which is not considered yet. But according to Michaletz et al. (2016) plants may purposefully ramp up their transpiration to avoid the carbon loss due to lethal temperature stress. Thus, one could consider net assimilation (gross assimilation - respiration) instead.\n\nEarlier tests - not included in this tutorial - showed that the initially assumed value for optimization (the starting values for vcmax, jmax, gs in optimize_traits_and_costs()) can lead to different optimal values. An optimization problem should be independent of initialization conditions, so this chaotic behavior could be investigated.\nThe current model only applies to long-term acclimation conditions. One could couple an instantaneous photosynthesis model (see {rpmodel} package) to predict on shorter timescales. However, to couple an energy balance model to the instantaneous photosynthesis model, one would first need a numerical formulation of the latter.\nThe current implementation uses the {optimr} package, which may or may not be suitable. To test whether another optimization algorithm finds a better solution, one could implement the {gensa} package instead."
  },
  {
    "objectID": "98-next-steps.html#refining-energy-balance-model",
    "href": "98-next-steps.html#refining-energy-balance-model",
    "title": "4  Next Steps",
    "section": "4.2 Refining Energy Balance Model",
    "text": "4.2 Refining Energy Balance Model\n\nNot all parameters used in the current implementation may stay constant. For example, a leaf’s emissivity may depart from the chosen 0.95. One could add such variables to the function’s input and run a sensitivity analysis.\nThe current energy balance model is based on the Penman-Monteith equation but one could use the simpler Priestly-Taylor equation as well (e.g. as compared in Dong et al. (2017)).\nThe current energy balance model is based on the {plantecophys} package (Duursma, 2015). One could also implement and test the more exhaustive model implemented in the {tealeaves} package (Muir, 2019)."
  },
  {
    "objectID": "98-next-steps.html#test-cases-for-model-evaluation",
    "href": "98-next-steps.html#test-cases-for-model-evaluation",
    "title": "4  Next Steps",
    "section": "4.3 Test Cases for Model Evaluation",
    "text": "4.3 Test Cases for Model Evaluation\n\n\\(V_{cmax}\\) and \\(J_{max}\\): One could use global leaf-measurements from Peng et al. (2021) to evaluate the prediction of \\(V_{cmax}\\) and \\(J_{max}\\) by the numerical P-Model. Also, using this data one could revise the cost factor \\(c\\) following the methods by Wang et al. (2017).\n\nTo predict \\(V_{cmax}\\) at the canopy-level, one could also implement the methodology by Jiang et al. (2020) and additionally predict land surface temperatures as explained next.\nNote: The cost factor \\(c\\) is hard-coded for now. The P-Model functions would need to be adjusted to create a working calibration routine.\n\nLand Surface Temperatures: To evaluate the prediction of leaf temperatures, one could use MODIS Land Surface Temperature data over dense ecosystems (high leaf area index) at FLUXNET sites without water stress (see Stocker et al. (2018)).\nLong-Term Leaf Temperature Measurements: To evaluate whether the predicted leaf temperature resembles an optimal long-term leaf temperature, one could use long time-series of leaf temperature measurements from e.g. thermal imaging (Still et al., 2022). Another data source could be the photosynthesis-weighted leaf temperature that can be inferred from \\(^{18}\\)O isotopes (Helliker & Richter, 2008).\n\\(^{13}\\)C Isotopes: To evaluate the prediction of the long-term ratio of internal to ambient CO\\(_2\\) concentrations (\\(\\chi\\)), one could repeat the analyses done in Stocker et al. (2020). This could also be used to revise the cost factor \\(\\beta\\).\n\n\n\n\n\nDong, N., Prentice, I. C., Harrison, S. P., Song, Q. H., Zhang, Y. P., & Sykes, M. (2017). Biophysical homoeostasis of leaf temperature: A neglected process for vegetation and land-surface modelling. Global Ecology and Biogeography, 26(9), 998–1007. https://doi.org/10.1111/geb.12614\n\n\nDuursma, R. A. (2015). Plantecophys - An R Package for Analysing and Modelling Leaf Gas Exchange Data. PLOS ONE, 10(11), e0143346. https://doi.org/bkmj\n\n\nHelliker, B. R., & Richter, S. L. (2008). Subtropical to boreal convergence of tree-leaf temperatures. Nature, 454(7203), 511–514. https://doi.org/10.1038/nature07031\n\n\nJiang, C., Ryu, Y., Wang, H., & Keenan, T. F. (2020). An optimality-based model explains seasonal variation in C3 plant photosynthetic capacity. Global Change Biology, 26(11), 6493–6510. https://doi.org/10.1111/gcb.15276\n\n\nJoshi, J., Stocker, B. D., Hofhansl, F., Zhou, S., Dieckmann, U., & Prentice, I. C. (2022). Towards a unified theory of plant photosynthesis and hydraulics. Nature Plants. https://doi.org/10.1038/s41477-022-01244-5\n\n\nMichaletz, S. T., Weiser, M. D., McDowell, N. G., Zhou, J., Kaspari, M., Helliker, B. R., & Enquist, B. J. (2016). The energetic and carbon economic origins of leaf thermoregulation. Nature Plants, 2(9), 16129. https://doi.org/10.1038/nplants.2016.129\n\n\nMuir, C. D. (2019). tealeaves: an R package for modelling leaf temperature using energy budgets. AoB PLANTS, 11(6), plz054. https://doi.org/10.1093/aobpla/plz054\n\n\nPeng, Y., Bloomfield, K. J., Cernusak, L. A., Domingues, T. F., & Colin Prentice, I. (2021). Global climate and nutrient controls of photosynthetic capacity. Communications Biology, 4(1), 462. https://doi.org/10.1038/s42003-021-01985-7\n\n\nStill, C. J., Page, G., Rastogi, B., Griffith, D. M., Aubrecht, D. M., Kim, Y., Burns, S. P., Hanson, C. V., Kwon, H., Hawkins, L., Meinzer, F. C., Sevanto, S., Roberts, D., Goulden, M., Pau, S., Detto, M., Helliker, B., & Richardson, A. D. (2022). No evidence of canopy-scale leaf thermoregulation to cool leaves below air temperature across a range of forest ecosystems. Proceedings of the National Academy of Sciences, 119(38), e2205682119. https://doi.org/10.1073/pnas.2205682119\n\n\nStocker, B. D., Wang, H., Smith, N. G., Harrison, S. P., Keenan, T. F., Sandoval, D., Davis, T., & Prentice, I. C. (2020). P-model v1.0: an optimality-based light use efficiency model for simulating ecosystem gross primary production. Geoscientific Model Development, 13(3), 1545–1581. https://doi.org/10.5194/gmd-13-1545-2020\n\n\nStocker, B. D., Zscheischler, J., Keenan, T. F., Prentice, I. C., Peñuelas, J., & Seneviratne, S. I. (2018). Quantifying soil moisture impacts on light use efficiency across biomes. New Phytologist, 218(4), 14301449. https://doi.org/gg3sk4\n\n\nWang, H., Prentice, I. C., Keenan, T. F., Davis, T. W., Wright, I. J., Cornwell, W. K., Evans, B. J., & Peng, C. (2017). Towards a universal model for carbon dioxide uptake by plants. Nature Plants, 3(9), 734–741. https://doi.org/10.1038/s41477-017-0006-8"
  },
  {
    "objectID": "99-variables.html",
    "href": "99-variables.html",
    "title": "Variables",
    "section": "",
    "text": "Overview of variables used in this tutorial.\n\n\n\n\n\n\n\n\nSymbol\nVariable\nUnit\nDescription\n\n\n\n\n\\(V_{cmax}\\)\nvcmax\n\\(\\mu\\)mol/CO\\(_2\\)/s\nMaximum carboxylation rate of rubisco\n\n\n\\(J_{max}\\)\njmax\n\\(\\mu\\)mol/CO\\(_2\\)/s\nMaximum rate of electron transport\n\n\n\\(J\\)\nj\n\\(\\mu\\)mol/CO\\(_2\\)/s\nElectron transport rate\n\n\n\\(g_s\\)\ngs\n\\(\\mu\\)mol/CO\\(_2\\)/s\nStomatal conductance in units of CO \\(_2\\)\n\n\n\\(c_i\\)\nci\n-\nLeaf-internal CO\\(_2\\) concentration\n\n\n\\(A_c\\)\nac\n\\(\\mu\\)mol/CO\\(_2\\)/s\nCarboxylation-limited photosynthesis\n\n\n\\(A_j\\)\naj\n\\(\\mu\\)mol/CO\\(_2\\)/s\nRuBP-limited (electron-transport limited) photosynthesis\n\n\n\\(A_{gross}\\)\nagross\n\\(\\mu\\)mol/CO\\(_2\\)/s\nGross photosynthesis\n\n\n\\(K\\)\nkmm\nPa\nMichaelis-Menten Constant\n\n\n\\(\\Gamma^{\\star}\\)\ngammastar\nPa\nPhotorespiration Point\n\n\n\\(D\\)\nvpd_*\nPa\nVapor pressure deficit of air or within the leaf\n\n\n\\(T\\)\ntc__*\nºC\nLeaf or air temperature\n\n\n\\(a\\)\nnot used\n-\nMarginal costs for water uptake\n\n\n\\(b\\)\nnot used\n-\nMarginal costs for nitrogen uptake\n\n\n\\(\\eta^{\\star}\\)\nn_star\n-\nRelative viscosity of water\n\n\n\\(\\beta\\)\nbeta\n-\nUnit cost ratio of acquiring nitrogen over water\n\n\n\\(c\\)\nbeta\n-\nUnit cost for maintaining electron transport"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Berry, J., & Bjorkman, O. (1980). Photosynthetic Response and\nAdaptation to Temperature in Higher Plants. Annual Review of Plant\nPhysiology, 31(1), 491–543. https://doi.org/10.1146/annurev.pp.31.060180.002423\n\n\nBlonder, B., & Michaletz, S. T. (2018). A model for leaf temperature\ndecoupling from air temperature. Agricultural and Forest\nMeteorology, 262, 354–360. https://doi.org/10.1016/j.agrformet.2018.07.012\n\n\nCavaleri, M. A. (2020). Cold-blooded forests in a warming\nworld. New Phytologist, 228(5), 1455–1457. https://doi.org/10.1111/nph.16916\n\n\nDong, N., Prentice, I. C., Harrison, S. P., Song, Q. H., Zhang, Y. P.,\n& Sykes, M. (2017). Biophysical homoeostasis of leaf temperature: A\nneglected process for vegetation and land-surface\nmodelling. Global Ecology and Biogeography, 26(9),\n998–1007. https://doi.org/10.1111/geb.12614\n\n\nDoughty, C. E., Keany, J. M., Wiebe, B. C., Rey-Sanchez, C., Carter, K.\nR., Middleby, K. B., Cheesman, A. W., Goulden, M. L., Rocha, H. R. da,\nMiller, S. D., Malhi, Y., Fauset, S., Gloor, E., Slot, M., Oliveras\nMenor, I., Crous, K. Y., Goldsmith, G. R., & Fisher, J. B. (2023).\nTropical forests are approaching critical temperature thresholds.\nNature, 1–7. https://doi.org/10.1038/s41586-023-06391-z\n\n\nDrake, J. E. (2023). A data-intensive documentation of\nplant ecosystem thermoregulation across spatial and temporal scales.\nNew Phytologist, 238(3), 921–923. https://doi.org/10.1111/nph.18819\n\n\nDrake, J. E., Harwood, R., Vårhammar, A., Barbour, M. M., Reich, P. B.,\nBarton, C. V. M., & Tjoelker, M. G. (2020). No evidence of\nhomeostatic regulation of leaf temperature in Eucalyptus parramattensis\ntrees: integration of CO2 flux and oxygen isotope methodologies. New\nPhytologist, 228(5), 1511–1523. https://doi.org/10.1111/nph.16733\n\n\nDuursma, R. A. (2015). Plantecophys - An R Package for Analysing and\nModelling Leaf Gas Exchange Data. PLOS ONE, 10(11),\ne0143346. https://doi.org/bkmj\n\n\nFranklin, O., Harrison, S. P., Dewar, R., Farrior, C. E., Brännström,\nÅ., Dieckmann, U., Pietsch, S., Falster, D., Cramer, W., Loreau, M.,\nWang, H., Mäkelä, A., Rebel, K. T., Meron, E., Schymanski, S. J.,\nRovenskaya, E., Stocker, B. D., Zaehle, S., Manzoni, S., … Prentice, I.\nC. (2020). Organizing principles for vegetation dynamics. Nature\nPlants, 6(5), 444453. https://doi.org/ghmz7g\n\n\nGuo, Z., Still, C. J., Lee, C. K. F., Ryu, Y., Blonder, B., Wang, J.,\nBonebrake, T. C., Hughes, A., Li, Y., Yeung, H. C. H., Zhang, K., Law,\nY. K., Lin, Z., & Wu, J. (2023). Does plant ecosystem\nthermoregulation occur? An extratropical assessment at\ndifferent spatial and temporal scales. New Phytologist,\n238(3), 1004–1018. https://doi.org/10.1111/nph.18632\n\n\nHarrison, S. P., Cramer, W., Franklin, O., Prentice, I. C., Wang, H.,\nBrännström, Å., Boer, H., Dieckmann, U., Joshi, J., Keenan, T. F.,\nLavergne, A., Manzoni, S., Mengoli, G., Morfopoulos, C., Peñuelas, J.,\nPietsch, S., Rebel, K. T., Ryu, Y., Smith, N. G., … Wright, I. J.\n(2021). Eco-evolutionary optimality as a means to improve\nvegetation and land-surface models. New\nPhytologist, 231(6), 2125–2141. https://doi.org/10.1111/nph.17558\n\n\nHelliker, B. R., & Richter, S. L. (2008). Subtropical to boreal\nconvergence of tree-leaf temperatures. Nature,\n454(7203), 511–514. https://doi.org/10.1038/nature07031\n\n\nJiang, C., Ryu, Y., Wang, H., & Keenan, T. F. (2020). An\noptimality-based model explains seasonal variation in C3 plant\nphotosynthetic capacity. Global Change Biology,\n26(11), 6493–6510. https://doi.org/10.1111/gcb.15276\n\n\nJoshi, J., Stocker, B. D., Hofhansl, F., Zhou, S., Dieckmann, U., &\nPrentice, I. C. (2022). Towards a unified theory of plant photosynthesis\nand hydraulics. Nature Plants. https://doi.org/10.1038/s41477-022-01244-5\n\n\nKörner, C., & Hiltbrunner, E. (2018). The 90 ways to describe plant\ntemperature. Perspectives in Plant Ecology, Evolution and\nSystematics, 30, 16–21. https://doi.org/10.1016/j.ppees.2017.04.004\n\n\nLeuning, R., Kelliher, F. M., Pury, D. G. G., & Schulze, E.-D.\n(1995). Leaf nitrogen, photosynthesis, conductance and transpiration:\nscaling from leaves to canopies. Plant, Cell and Environment,\n18(10), 1183–1200. https://doi.org/10.1111/j.1365-3040.1995.tb00628.x\n\n\nMahan, J. R., & Upchurch, D. R. (1988). Maintenance of constant leaf\ntemperature by plants. Hypothesis-limited\nhomeothermy. Environmental and Experimental Botany,\n28(4), 351–357. https://doi.org/10.1016/0098-8472(88)90059-7\n\n\nMaire, V., Martre, P., Kattge, J., Gastal, F., Esser, G., Fontaine, S.,\n& Soussana, J.-F. (2012). The Coordination of Leaf Photosynthesis\nLinks C and N Fluxes in C3 Plant Species. PLoS ONE,\n7(6), e38345. https://doi.org/10.1371/journal.pone.0038345\n\n\nMichaletz, S. T., Weiser, M. D., McDowell, N. G., Zhou, J., Kaspari, M.,\nHelliker, B. R., & Enquist, B. J. (2016). The energetic and carbon\neconomic origins of leaf thermoregulation. Nature Plants,\n2(9), 16129. https://doi.org/10.1038/nplants.2016.129\n\n\nMuir, C. D. (2019). tealeaves: an R package for modelling leaf\ntemperature using energy budgets. AoB PLANTS, 11(6),\nplz054. https://doi.org/10.1093/aobpla/plz054\n\n\nPeng, Y., Bloomfield, K. J., Cernusak, L. A., Domingues, T. F., &\nColin Prentice, I. (2021). Global climate and nutrient controls of\nphotosynthetic capacity. Communications Biology, 4(1),\n462. https://doi.org/10.1038/s42003-021-01985-7\n\n\nPrentice, I. C., Dong, N., Gleason, M. S., Maire, V., & Wright, J.\nI. (2014). Balancing the costs of carbon gain and water transport:\nTesting a new theoretical framework for plant functional ecology.\nEcology Letters, 17(1), 82–91. https://doi.org/gf9w4m\n\n\nPrentice, I. C., Liang, X., Medlyn, B. E., & Wang, Y.-P. (2015).\nReliable, robust and realistic: the three R’s of next-generation\nland-surface modelling. Atmospheric Chemistry and Physics,\n15(10), 5987–6005. https://doi.org/10.5194/acp-15-5987-2015\n\n\nSmith, N. G., & Dukes, J. S. (2013). Plant respiration and\nphotosynthesis in global-scale models: Incorporating\nacclimation to temperature and CO2. Global Change Biology,\n19(1), 4563. https://doi.org/f4gv3p\n\n\nStill, C. J., Page, G., Rastogi, B., Griffith, D. M., Aubrecht, D. M.,\nKim, Y., Burns, S. P., Hanson, C. V., Kwon, H., Hawkins, L., Meinzer, F.\nC., Sevanto, S., Roberts, D., Goulden, M., Pau, S., Detto, M., Helliker,\nB., & Richardson, A. D. (2022). No evidence of canopy-scale leaf\nthermoregulation to cool leaves below air temperature across a range of\nforest ecosystems. Proceedings of the National Academy of\nSciences, 119(38), e2205682119. https://doi.org/10.1073/pnas.2205682119\n\n\nStill, C. J., Rastogi, B., Page, G. F. M., Griffith, D. M., Sibley, A.,\nSchulze, M., Hawkins, L., Pau, S., Detto, M., & Helliker, B. R.\n(2021). Imaging canopy temperature: shedding (thermal) light on\necosystem processes. New Phytologist, 230(5),\n1746–1753. https://doi.org/10.1111/nph.17321\n\n\nStocker, B. D., Wang, H., Smith, N. G., Harrison, S. P., Keenan, T. F.,\nSandoval, D., Davis, T., & Prentice, I. C. (2020). P-model v1.0: an\noptimality-based light use efficiency model for simulating ecosystem\ngross primary production. Geoscientific Model Development,\n13(3), 1545–1581. https://doi.org/10.5194/gmd-13-1545-2020\n\n\nStocker, B. D., Zscheischler, J., Keenan, T. F., Prentice, I. C.,\nPeñuelas, J., & Seneviratne, S. I. (2018). Quantifying soil moisture\nimpacts on light use efficiency across biomes. New Phytologist,\n218(4), 14301449. https://doi.org/gg3sk4\n\n\nStocker, B., & Hufkens, K. (2021). Rpmodel v1.2.0: R package\nimplementing the p-model. Zenodo. https://doi.org/10.5281/ZENODO.3359706\n\n\nVinod, N., Slot, M., McGregor, I. R., Ordway, E. M., Smith, M. N.,\nTaylor, T. C., Sack, L., Buckley, T. N., & Anderson-Teixeira, K. J.\n(2023). Thermal sensitivity across forest vertical profiles: patterns,\nmechanisms, and ecological implications. New Phytologist,\n237(1), 22–47. https://doi.org/10.1111/nph.18539\n\n\nWang, H., Prentice, I. C., Keenan, T. F., Davis, T. W., Wright, I. J.,\nCornwell, W. K., Evans, B. J., & Peng, C. (2017). Towards a\nuniversal model for carbon dioxide uptake by plants. Nature\nPlants, 3(9), 734–741. https://doi.org/10.1038/s41477-017-0006-8\n\n\nWang, Y.-P., & Leuning, R. (1998). A two-leaf model for canopy\nconductance, photosynthesis and partitioning of available energy I:\nAgricultural and Forest Meteorology, 91(1-2), 89–111.\nhttps://doi.org/10.1016/S0168-1923(98)00061-6"
  }
]